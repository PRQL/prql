# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json

version: "3"

tasks:
  build:
    desc:
      Build the web products for distribution - Website, Book, and Playground.
    cmds:
      - cd website && hugo --minify
      - cd book && mdbook build
      - mkdir -p website/public
      # Copy the book into the website path, using rsync so it only copies new files
      - rsync -ai --checksum --delete --no-times book/book/ website/public/book/
      # (we don't use `build-playground-dependencies`, since that uses the dev profile)
      - cd playground && npm ci && npm run build
      # We place the playground app in a nested path, because we want to use
      # prql-lang.org/playground with an iframe containing the playground.
      # Possibly there's a more elegant way of doing this...
      - rsync -ai --checksum --delete --no-times playground/dist/
        website/public/playground/playground/

  run-website:
    desc: Build & serve the static website for interactive development.
    dir: website
    cmds:
      - hugo server

  run-book:
    desc: Build & serve the book for interactive development.
    dir: book
    cmds:
      - mdbook serve --port=3000

  run-playground:
    desc: Build & serve the playground for interactive development.
    dir: playground
    env:
      PROFILE: dev
    cmds:
      - task: build-playground-dependencies
      - npm run dev

  fmt:
    cmds:
      - cmd: |
          prettier --write . \
          --config=../.prettierrc.yaml \
          --ignore-path=../.prettierignore \
          --ignore-unknown \
          --log-level=warn

  build-playground-dependencies:
    # Check if npm dependencies for the playground need to be updated
    # Use task's sources/generates to see if package.json,
    # or anything in crates or bindings was updated after the
    # node_modules was rebuilt
    desc: Install deps, checking whether a dependency recently changed
    dir: playground
    env:
      PROFILE: dev
    cmds:
      - npm ci
    # Note that now we have `PROFILE: dev`, the build is much much faster, and
    # we could remove this sources check if it became inconvenient.
    sources:
      - package.json
      - package-lock.json
      - ../../prqlc/**/*.rs
      - ../../prqlc/bindings/**/*.rs
# These tasks have been factored out in favor of the remaining tasks
# run-web:
#   desc: Build & serve the website & playground.
#   summary:
#     Note that this only live-reloads the static website; and requires
#     rerunning to pick up playground & book changes.
#   dir: web/website
#   cmds:
#     - task: build
#     # Then start web server with rendering to disk, so it picks up the playground files.
#     - hugo server --renderToDisk

# run-playground-cached:
#   desc: Build & serve the playground, without rebuilding rust code.
#   dir: web/playground
#   cmds:
#     - task: install-playground-dependencies
#     - npm start
