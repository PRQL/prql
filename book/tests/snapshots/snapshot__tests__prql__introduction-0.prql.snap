---
source: book/tests/snapshot.rs
expression: "from employees\nfilter start_date > @2021-01-01               # Clear date syntax\nderive [                                      # `derive` adds columns / variables\n  gross_salary = salary + (tax ?? 0),         # Terse coalesce\n  gross_cost = gross_salary + benefits_cost,  # Variables can use other variables\n]\nfilter gross_cost > 0\ngroup [title, country] (                      # `group` runs a pipeline over each group\n  aggregate [                                 # `aggregate` reduces each group to a value\n    average gross_salary,\n    sum_gross_cost = sum gross_cost,          # `=` sets a column name\n  ]\n)\nfilter sum_gross_cost > 100_000               # `filter` replaces both of SQL's `WHERE` & `HAVING`\nderive id = f\"{title}_{country}\"              # F-strings like Python\nderive country_code = s\"LEFT(country, 2)\"     # S-strings allow using SQL as an escape hatch\nsort [sum_gross_cost, -country]               # `-country` means descending order\ntake 1..20                                    # Range expressions (also valid here as `take 20`)\n"
---
from employees
filter start_date > @2021-01-01
derive [
  gross_salary = salary + tax ?? 0,
  gross_cost = gross_salary + benefits_cost,
]
filter gross_cost > 0
group [
  title,
  country,
] (
  aggregate [
  average gross_salary,
  sum_gross_cost = sum gross_cost,
]
)
filter sum_gross_cost > 100000
derive id = f"{title}_{country}"
derive country_code = s"LEFT(country, 2)"
sort [
  sum_gross_cost,
  -country,
]
take 1..20



