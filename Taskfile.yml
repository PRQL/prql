# This file gives new contributors an easy way to get everything they need,
# assuming `cargo` and [Task](https://taskfile.dev) are installed.

# Beyond installing requirements, we generally shouldn't be using this as a
# Makefile, requiring running this to have a good dev loop ‚Äî rust tools are
# independently good, and adding an intermediate layer means we're
# reimplementing things or getting in the way. Instead, this can be used to
# aggregate commands that's are currently separate; e.g. check out `test-all`.

# Some of the file may be somewhat over-engineered!

version: "3"

includes:
  cargo-tools: ./Taskfile.cargo-tools.yml

vars:
  # Keep in sync with .vscode/extensions.json
  vscode_extensions: |
    budparr.language-hugo-vscode
    esbenp.prettier-vscode
    mitsuhiko.insta
    prql-lang.prql-vscode
    rust-lang.rust-analyzer

tasks:
  # main installer is "setup-dev" which calls other tasks
  setup-dev:
    preconditions:
      - sh: which clang
        msg: |
          üî¥ Can't find `clang`, which is required to install a full development environment (we use `duckdb` in our tests, which requires it).

          Please install it. On MacOS, that's

            xcode-select --install

          On Debian Linux, that's

            apt-get update && apt-get install clang

    desc: Install tools for PRQL development.
    cmds:
      - task: cargo-tools:install
      - task: install-brew-dependencies
      - task: install-maturin
      - task: install-pre-commit
      - task: install-npm-dependencies
      # We only suggest, rather than install; we don't want to intrude (maybe
      # we're being too conservative?).
      - task: suggest-vscode-extensions
      - pre-commit install-hooks
      - cmd: |
          echo "
          üü¢ Setup complete! ‚úÖüöÄ"
        silent: true

  install-cargo-tools:
    # factored this out because it takes a long time to build
    desc: Alias of `cargo-tools:install`
    deps:
      - cargo-tools:install

  install-maturin:
    desc: Install maturin.
    cmds:
      - python3 -m pip install -U maturin

  suggest-vscode-extensions:
    desc: Check and suggest VSCode extensions.
    vars:
      extensions:
        # List extensions, or just return true if we can't find `code`.
        sh: which code && code --list-extensions || true
      missing_extensions: |
        {{ range ( .vscode_extensions | trim | splitLines ) -}}
          {{ if not (contains . $.extensions) }}‚ùå {{.}} {{else}}‚úÖ {{.}} {{ end }}
        {{ end -}}
    status:
      # If vscode isn't installed, or there are no missing extensions,
      # return 0 and exit early.
      - '[ ! -x "$(which code)" ] || {{ not (contains "‚ùå" .missing_extensions)
        }}'
    silent: true
    cmds:
      - |
        echo "

        üü° It looks like VSCode is installed but doesn't have all recommended extensions installed:
        {{ .missing_extensions }}

        Install them with:

          task install-vscode-extensions
          "

  install-vscode-extensions:
    desc: Install recommended VSCode extensions.
    cmds:
      - |
        {{ range ( .vscode_extensions | trim | splitLines ) -}}
          code --install-extension {{.}}
        {{ end -}}

  install-pre-commit:
    # Someone might have this installed with `brew`,
    # so only install if it can't be found.
    status:
      - which pre-commit
    cmds:
      - python3 -m pip install -U pre-commit

  install-brew-dependencies:
    status:
      - which hugo
      - which npm
      - which python3
      - which elixir
    preconditions:
      - sh: which brew
        msg: |


          üî¥ Can't find `brew`, which we use to install Hugo & npm. Either install brew and re-run this, or install them directly based on:
          - https://gohugo.io/getting-started/installing/
          - https://docs.npmjs.com/downloading-and-installing-node-js-and-npm
    cmds:
      - brew install hugo npm python3 elixir

  install-npm-dependencies:
    cmds:
      - npm install --location=global prettier prettier-plugin-go-template
      - cmd:
          echo "In order to get nice auto-formatting of web code in VSCode,
          VSCode requires configuration to use the system-wide install of
          prettier. See
          https://github.com/NiklasPor/prettier-plugin-go-template/issues/58#issuecomment-1085060511
          for more info."
        silent: true

  build-all:
    desc: Build everything.

    summary: |
      Build everything.

      Running this isn't required when developing; it's for caching or as a reference.
    cmds:
      - cargo build --all-targets --target=wasm32-unknown-unknown
      - cargo build --all-targets
      - task: build-web

  test-all:
    desc: Test everything, accepting snapshots.
    summary: |
      Test everything, accepting snapshots.

      Running this isn't required when developing; it's for caching or as a reference.

    cmds:
      # TODO: this doesn't run the python tests. We should add them in here.
      # They are run in `test-all.yaml` on GHA.
      - task: test-rust
      - task: build-all
      - task: test-js
      - pre-commit run -a

  test-rust:
    desc: Test all rust code, accepting snapshots.
    # Commenting out the ability to watch, since Task seems to trip over itself,
    # starting a new process before the old one has finished when a process
    # changes output files.
    #
    # I think this is happening because the book tests delete `.prql` files,
    # which causes `.snap` files to be removed when unreferenced, and this then
    # compounds. Ideally the `mdbook` tests wouldn't delete its path of `.prql`
    # files, instead only updating changed paths.
    #
    # We can turn this back on when Task handles it more robustly, or we improve
    # the mdbook tests.
    #
    # sources:
    #   # See notes in `test-rust-fast`
    #   - "**/*.rs"
    #   - "**/*.md"
    #   - "**/*.toml"
    #   - "**/*.lock"
    #   - "**/*.snap"
    cmds:
      # Only delete unreferenced snapshots on the default target ‚Äî lots are
      # excluded under wasm. Note that this will also over-delete on Windows.
      # Note that we need to pass the target explicitly to manage
      # https://github.com/rust-lang/cargo/issues/8899
      - cargo insta test --accept --unreferenced=auto
      - cargo insta test --accept --target=wasm32-unknown-unknown
      # We build the book too, because that acts as a test
      - cd web/book && mdbook build

  test-rust-fast:
    desc: Test prql-compiler's unit tests.
    summary: |
      Test prql-compiler's unit tests, including accepting snapshots.

      This can be useful as an inner loop when developing, by running this on any file change.
      Use `-w` to get that behavior:

        task -w test-rust-fast

      New or changed snapshots are accepted, and expected to be reviewed with git.

    env:
      RUST_BACKTRACE: 1
    sources:
      # I don't think we can specify this is a single glob, which would be nice.
      # Ideally we want to exclude `.pending-snap` & `.snap.new` files so runs
      # doesn't cause an infinite loop of other runs (though possibly mitigated
      # by `--accept` and task not interrupting existing runs, so all files go
      # to `.snap`s which match the generated output?).
      - "prql-compiler/**/*.rs"
      - "prql-compiler/**/*.snap"
    cmds:
      - cargo insta test --accept -p prql-compiler --lib -- --quiet

  build-web:
    desc: Build the website, including the book & playground.
    dir: web
    cmds:
      - cd website && hugo --minify
      - cd book && mdbook build
      - mkdir -p website/public
      # Copy the book into the website path, using rsync so it only copies new files
      - rsync -ai --checksum --delete book/book/ website/public/book/
      # Must set `install-links=false` in the playground's `npm install` to
      # install prql-js as the regular dependency, instead of creating a
      # symlink. Refer to https://github.com/PRQL/prql/pull/1296.
      - cd playground && npm install --install-links=false
      - cd playground && npm run build
      # We place the playground app in a nested path, because we want to use
      # prql-lang.org/playground with an iframe containing the playground.
      # Possibly there's a more elegant way of doing this...
      - rsync -ai --checksum --delete playground/build/
        website/public/playground/playground

  test-js:
    # These are mostly copied from the tasks in `test-all.yaml`
    dir: prql-js
    cmds:
      - npm run build
      - npm cit

  # Currently disabled; see prql-elixir/README.md for details
  # test-elixir:
  #   dir: prql-elixir
  #   cmds:
  #     # We could move this line into an `install` task
  #     - mix local.hex --force
  #     - mix deps.get --force
  #     - mix compile
  #     - mix test

  run-website:
    desc: Build & serve the static website.
    dir: web/website
    cmds:
      - hugo server

  run-book:
    desc: Build & serve the book.
    dir: web/book
    cmds:
      - mdbook serve --port=3000

  run-playground:
    desc: Build & serve the playground.
    dir: web/playground
    cmds:
      # Must set `install-links=false` in the playground's `npm install` to
      # install prql-js as the regular dependency, instead of creating a
      # symlink. Refer to https://github.com/PRQL/prql/pull/1296.
      - npm install --install-links=false
      - npm start
#
# The next three tasks are not used for either:
#  - the Dockerfile (installing brew takes forever)
#    so the Dockerfile simply installs hugo & nodejs directly
#  - the "desktop setup" - it uses other tasks in the Taskfile.yml
# They remain in the Taskfile.yml as a hint if they should ever be needed

# install-brew:
#   # Initially added for building Docker container
#   status:
#     - which brew
#   cmds:
#     # https://stackoverflow.com/questions/58292862/how-to-install-homebrew-on-ubuntu-inside-docker-container
#     - useradd -m -s /bin/zsh linuxbrew
#     - usermod -aG sudo linuxbrew
#     - mkdir -p /home/linuxbrew/.linuxbrew
#     - chown -R linuxbrew /home/linuxbrew/.linuxbrew
#     - export HOMEBREW_INSTALL_FROM_API=1
#     - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
#     - chown -R $CONTAINER_USER: /home/linuxbrew/.linuxbrew

# install-hugo:
#   cmds:
#     # - /home/linuxbrew/.linuxbrew/bin/brew install hugo
#     - curl -L https://github.com/gohugoio/hugo/releases/download/v0.91.2/hugo_0.91.2_Linux-64bit.deb -o hugo.deb
#     - apt install ./hugo.deb

# install-nodejs:
#   cmds:
#     # - /home/linuxbrew/.linuxbrew/bin/brew install nodejs
#     - curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
#     - apt install -y nodejs
#     - cd /app/playground/ ; npm install
