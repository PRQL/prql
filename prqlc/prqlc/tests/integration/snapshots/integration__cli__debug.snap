---
source: prqlc/prqlc/tests/integration/cli.rs
info:
  program: prqlc
  args:
    - "--color=never"
    - debug
    - resolve
  env:
    NO_COLOR: "1"
    CLICOLOR_FORCE: ""
    RUST_BACKTRACE: ""
    RUST_LOG: ""
  stdin: from.tracks
---
success: true
exit_code: 0
----- stdout -----
Module {
    redirects: [
        "this",
        "that",
        "_param",
        "std",
        "_generic",
    ],
    names: {
        "from": Decl {
            declared_at: None,
            kind: Module(
                Module {
                    names: {
                        "_infer": Decl {
                            declared_at: None,
                            kind: Infer(
                                TableDecl(
                                    TableDecl {
                                        ty: Some(
                                            Ty {
                                                kind: Array(
                                                    Ty {
                                                        kind: Tuple(
                                                            [
                                                                Wildcard(
                                                                    None,
                                                                ),
                                                            ],
                                                        ),
                                                        span: None,
                                                        name: None,
                                                    },
                                                ),
                                                span: None,
                                                name: None,
                                            },
                                        ),
                                        expr: LocalTable,
                                    },
                                ),
                            ),
                            order: 0,
                            annotations: [],
                        },
                        "_infer_module": Decl {
                            declared_at: None,
                            kind: Infer(
                                Module(
                                    Module {
                                        names: {},
                                    },
                                ),
                            ),
                            order: 0,
                            annotations: [],
                        },
                        "tracks": Decl {
                            declared_at: None,
                            kind: TableDecl(
                                TableDecl {
                                    ty: Some(
                                        Ty {
                                            kind: Array(
                                                Ty {
                                                    kind: Tuple(
                                                        [
                                                            Wildcard(
                                                                None,
                                                            ),
                                                        ],
                                                    ),
                                                    span: None,
                                                    name: None,
                                                },
                                            ),
                                            span: None,
                                            name: None,
                                        },
                                    ),
                                    expr: LocalTable,
                                },
                            ),
                            order: 0,
                            annotations: [],
                        },
                    },
                },
            ),
            order: 0,
            annotations: [],
        },
        "main": Decl {
            declared_at: Some(
                111,
            ),
            kind: TableDecl(
                TableDecl {
                    ty: Some(
                        Ty {
                            kind: Array(
                                Ty {
                                    kind: Tuple(
                                        [
                                            Wildcard(
                                                None,
                                            ),
                                        ],
                                    ),
                                    span: None,
                                    name: None,
                                },
                            ),
                            span: None,
                            name: None,
                        },
                    ),
                    expr: RelationVar(
                        Expr {
                            span: 1:0-11,
                            kind: Ident(
                                Ident {
                                    path: [
                                        "from",
                                    ],
                                    name: "tracks",
                                },
                            ),
                            id: 112,
                            ty: [{*..}],
                            lineage: Lineage {
                                columns: [
                                    All {
                                        input_id: 112,
                                        except: {},
                                    },
                                ],
                                inputs: [
                                    LineageInput {
                                        id: 112,
                                        name: "tracks",
                                        table: Ident {
                                            path: [
                                                "from",
                                            ],
                                            name: "tracks",
                                        },
                                    },
                                ],
                                prev_columns: [],
                            },
                        },
                    ),
                },
            ),
            order: 0,
            annotations: [],
        },
        "std": Decl {
            declared_at: Some(
                0,
            ),
            kind: Module(
                Module {
                    names: "... 76 entries ...",
                },
            ),
            order: 0,
            annotations: [],
        },
    },
}
[34mInfo:[0m 
   [38;5;246mâ•­[0m[38;5;246mâ”€[0m[38;5;246m[[0m:1:1[38;5;246m][0m
   [38;5;246mâ”‚[0m
 [38;5;246m1 â”‚[0m [31mf[0m[31mr[0m[31mo[0m[31mm[0m[31m.[0m[31mt[0m[31mr[0m[31ma[0m[31mc[0m[31mk[0m[31ms[0m
 [38;5;240m  â”‚[0m [31mâ”€[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m[31mâ”¬[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m  
 [38;5;240m  â”‚[0m      [31mâ•°[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m[31mâ”€[0m [from.tracks] table 
[38;5;246mâ”€â”€â”€â•¯[0m
module from {
  let _infer = internal infer

  let _infer_module = internal infer

  let tracks <[{*..}]> = internal local_table
}

let main <[{*..}]> = from.tracks

----- stderr -----

