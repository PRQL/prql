use std::collections::{HashMap, HashSet};
use std::sync::OnceLock;

use sqlparser::keywords::{
    Keyword, ALL_KEYWORDS, ALL_KEYWORDS_INDEX, RESERVED_FOR_COLUMN_ALIAS, RESERVED_FOR_TABLE_ALIAS,
};

/// True for keywords which we want to quote when translating to SQL.
///
/// Currently we're being fairly permissive (over-quoting is not a big concern).
// We're not including the full list from `SQL_KEYWORDS`, as that has terms such
// as `ID`, instead we bring a few dialects' keywords in.
pub(super) fn is_keyword(ident: &str) -> bool {
    let ident = ident.to_ascii_uppercase();

    sql_keywords().contains(ident.as_str())
}

fn sql_keywords() -> &'static HashSet<&'static str> {
    static SQL_KEYWORDS: OnceLock<HashSet<&str>> = OnceLock::new();
    SQL_KEYWORDS.get_or_init(|| {
        let mut m = HashSet::new();
        m.extend(SQLITE_KEYWORDS);
        m.extend(POSTGRES_KEYWORDS);
        m.extend(DUCKDB_KEYWORDS);

        let reverse_index: HashMap<&Keyword, usize> = ALL_KEYWORDS_INDEX
            .iter()
            .enumerate()
            .map(|(idx, kw)| (kw, idx))
            .collect();

        m.extend(
            RESERVED_FOR_COLUMN_ALIAS
                .iter()
                .map(|x| ALL_KEYWORDS[reverse_index[x]]),
        );

        m.extend(
            RESERVED_FOR_TABLE_ALIAS
                .iter()
                .map(|x| ALL_KEYWORDS[reverse_index[x]]),
        );
        m
    })
}

const SQLITE_KEYWORDS: &[&str] = &[
    "ABORT",
    "ACTION",
    "ADD",
    "AFTER",
    "ALL",
    "ALTER",
    "ALWAYS",
    "ANALYZE",
    "AND",
    "AS",
    "ASC",
    "ATTACH",
    "AUTOINCREMENT",
    "BEFORE",
    "BEGIN",
    "BETWEEN",
    "BY",
    "CASCADE",
    "CASE",
    "CAST",
    "CHECK",
    "COLLATE",
    "COLUMN",
    "COMMIT",
    "CONFLICT",
    "CONSTRAINT",
    "CREATE",
    "CROSS",
    "CURRENT",
    "CURRENT_DATE",
    "CURRENT_TIME",
    "CURRENT_TIMESTAMP",
    "DATABASE",
    "DEFAULT",
    "DEFERRABLE",
    "DEFERRED",
    "DELETE",
    "DESC",
    "DETACH",
    "DISTINCT",
    "DO",
    "DROP",
    "EACH",
    "ELSE",
    "END",
    "ESCAPE",
    "EXCEPT",
    "EXCLUDE",
    "EXCLUSIVE",
    "EXISTS",
    "EXPLAIN",
    "FAIL",
    "FILTER",
    "FIRST",
    "FOLLOWING",
    "FOR",
    "FOREIGN",
    "FROM",
    "FULL",
    "GENERATED",
    "GLOB",
    "GROUP",
    "GROUPS",
    "HAVING",
    "IF",
    "IGNORE",
    "IMMEDIATE",
    "IN",
    "INDEX",
    "INDEXED",
    "INITIALLY",
    "INNER",
    "INSERT",
    "INSTEAD",
    "INTERSECT",
    "INTO",
    "IS",
    "ISNULL",
    "JOIN",
    "KEY",
    "LAST",
    "LEFT",
    "LIKE",
    "LIMIT",
    "MATCH",
    "MATERIALIZED",
    "NATURAL",
    "NO",
    "NOT",
    "NOTHING",
    "NOTNULL",
    "NULL",
    "NULLS",
    "OF",
    "OFFSET",
    "ON",
    "OR",
    "ORDER",
    "OTHERS",
    "OUTER",
    "OVER",
    "PARTITION",
    "PLAN",
    "PRAGMA",
    "PRECEDING",
    "PRIMARY",
    "QUERY",
    "RAISE",
    "RANGE",
    "RECURSIVE",
    "REFERENCES",
    "REGEXP",
    "REINDEX",
    "RELEASE",
    "RENAME",
    "REPLACE",
    "RESTRICT",
    "RETURNING",
    "RIGHT",
    "ROLLBACK",
    "ROW",
    "ROWS",
    "SAVEPOINT",
    "SELECT",
    "SET",
    "TABLE",
    "TEMP",
    "TEMPORARY",
    "THEN",
    "TIES",
    "TO",
    "TRANSACTION",
    "TRIGGER",
    "UNBOUNDED",
    "UNION",
    "UNIQUE",
    "UPDATE",
    "USING",
    "VACUUM",
    "VALUES",
    "VIEW",
    "VIRTUAL",
    "WHEN",
    "WHERE",
    "WINDOW",
    "WITH",
    "WITHOUT",
];

// Copy table from
// <https://www.postgresql.org/docs/current/sql-keywords-appendix.html>, then run:
//
//    pbpaste | rg '^\w+\s*\treserved' | choose 0 | rg '(.*)' -r '"$1",' | pbcopy
const POSTGRES_KEYWORDS: &[&str] = &[
    "ABS",
    "ACOS",
    "ALL",
    "ALLOCATE",
    "ANALYSE",
    "ANALYZE",
    "AND",
    "ANY",
    "ANY_VALUE",
    "ARE",
    "ARRAY",
    "ARRAY_AGG",
    "AS",
    "ASC",
    "ASIN",
    "ASYMMETRIC",
    "ATAN",
    "AUTHORIZATION",
    "AVG",
    "BEGIN_FRAME",
    "BEGIN_PARTITION",
    "BINARY",
    "BIT_LENGTH",
    "BLOB",
    "BOTH",
    "BTRIM",
    "CARDINALITY",
    "CASE",
    "CAST",
    "CEIL",
    "CEILING",
    "CHARACTER_LENGTH",
    "CHAR_LENGTH",
    "CHECK",
    "CLASSIFIER",
    "CLOB",
    "COLLATE",
    "COLLATION",
    "COLLECT",
    "COLUMN",
    "CONCURRENTLY",
    "CONDITION",
    "CONNECT",
    "CONSTRAINT",
    "CONTAINS",
    "CONVERT",
    "CORR",
    "CORRESPONDING",
    "COS",
    "COSH",
    "COUNT",
    "COVAR_POP",
    "COVAR_SAMP",
    "CREATE",
    "CROSS",
    "CUME_DIST",
    "CURRENT_CATALOG",
    "CURRENT_DATE",
    "CURRENT_PATH",
    "CURRENT_ROLE",
    "CURRENT_ROW",
    "CURRENT_SCHEMA",
    "CURRENT_TIME",
    "CURRENT_TIMESTAMP",
    "CURRENT_USER",
    "DATALINK",
    "DATE",
    "DECFLOAT",
    "DEFAULT",
    "DEFERRABLE",
    "DEFINE",
    "DENSE_RANK",
    "DEREF",
    "DESC",
    "DESCRIBE",
    "DETERMINISTIC",
    "DISCONNECT",
    "DISTINCT",
    "DLNEWCOPY",
    "DLPREVIOUSCOPY",
    "DLURLCOMPLETE",
    "DLURLCOMPLETEONLY",
    "DLURLCOMPLETEWRITE",
    "DLURLPATH",
    "DLURLPATHONLY",
    "DLURLPATHWRITE",
    "DLURLSCHEME",
    "DLURLSERVER",
    "DLVALUE",
    "DO",
    "DYNAMIC",
    "ELEMENT",
    "ELSE",
    "END",
    "END_FRAME",
    "END_PARTITION",
    "EQUALS",
    "EVERY",
    "EXCEPT",
    "EXCEPTION",
    "EXEC",
    "EXP",
    "FALSE",
    "FETCH",
    "FIRST_VALUE",
    "FLOOR",
    "FOR",
    "FOREIGN",
    "FRAME_ROW",
    "FREE",
    "FREEZE",
    "FROM",
    "FULL",
    "FUSION",
    "GET",
    "GRANT",
    "GROUP",
    "HAVING",
    "ILIKE",
    "IN",
    "INDICATOR",
    "INITIAL",
    "INITIALLY",
    "INNER",
    "INTERSECT",
    "INTERSECTION",
    "INTO",
    "IS",
    "ISNULL",
    "JOIN",
    "JSON_TABLE_PRIMITIVE",
    "LAG",
    "LAST_VALUE",
    "LATERAL",
    "LEAD",
    "LEADING",
    "LEFT",
    "LIKE",
    "LIKE_REGEX",
    "LIMIT",
    "LISTAGG",
    "LN",
    "LOCALTIME",
    "LOCALTIMESTAMP",
    "LOG",
    "LOG10",
    "LOWER",
    "LPAD",
    "LTRIM",
    "MATCHES",
    "MATCH_NUMBER",
    "MATCH_RECOGNIZE",
    "MAX",
    "MEMBER",
    "MIN",
    "MOD",
    "MODIFIES",
    "MODULE",
    "MULTISET",
    "NATURAL",
    "NCLOB",
    "NOT",
    "NOTNULL",
    "NTH_VALUE",
    "NTILE",
    "NULL",
    "OCCURRENCES_REGEX",
    "OCTET_LENGTH",
    "OFFSET",
    "ON",
    "ONE",
    "ONLY",
    "OPEN",
    "OR",
    "ORDER",
    "OUTER",
    "OVERLAPS",
    "PATTERN",
    "PER",
    "PERCENT",
    "PERCENTILE_CONT",
    "PERCENTILE_DISC",
    "PERCENT_RANK",
    "PERIOD",
    "PLACING",
    "PORTION",
    "POSITION_REGEX",
    "POWER",
    "PRECEDES",
    "PRIMARY",
    "PTF",
    "RANK",
    "READS",
    "REFERENCES",
    "REGR_AVGX",
    "REGR_AVGY",
    "REGR_COUNT",
    "REGR_INTERCEPT",
    "REGR_R2",
    "REGR_SLOPE",
    "REGR_SXX",
    "REGR_SXY",
    "REGR_SYY",
    "RESULT",
    "RETURNING",
    "RIGHT",
    "ROW_NUMBER",
    "RPAD",
    "RTRIM",
    "RUNNING",
    "SCOPE",
    "SEEK",
    "SELECT",
    "SENSITIVE",
    "SESSION_USER",
    "SIMILAR",
    "SIN",
    "SINH",
    "SOME",
    "SPECIFIC",
    "SPECIFICTYPE",
    "SQLCODE",
    "SQLERROR",
    "SQLEXCEPTION",
    "SQLSTATE",
    "SQLWARNING",
    "SQRT",
    "STATIC",
    "STDDEV_POP",
    "STDDEV_SAMP",
    "SUBMULTISET",
    "SUBSET",
    "SUBSTRING_REGEX",
    "SUCCEEDS",
    "SUM",
    "SYMMETRIC",
    "SYSTEM_TIME",
    "SYSTEM_USER",
    "TABLE",
    "TABLESAMPLE",
    "TAN",
    "TANH",
    "THEN",
    "TIMEZONE_HOUR",
    "TIMEZONE_MINUTE",
    "TO",
    "TRAILING",
    "TRANSLATE",
    "TRANSLATE_REGEX",
    "TRANSLATION",
    "TRIM_ARRAY",
    "TRUE",
    "UNION",
    "UNIQUE",
    "UNNEST",
    "UPPER",
    "USER",
    "USING",
    "VALUE_OF",
    "VARBINARY",
    "VARIADIC",
    "VAR_POP",
    "VAR_SAMP",
    "VERBOSE",
    "VERSIONING",
    "WHEN",
    "WHENEVER",
    "WHERE",
    "WIDTH_BUCKET",
    "WINDOW",
    "WITH",
    "XMLAGG",
    "XMLBINARY",
    "XMLCAST",
    "XMLCOMMENT",
    "XMLDOCUMENT",
    "XMLITERATE",
    "XMLQUERY",
    "XMLTEXT",
    "XMLVALIDATE",
];

// In duckdb:
//
//   .output
//   .mode list
//   .headers off
//   .output keywords.txt
//   SELECT '"'||UPPER(keyword_name)||'",' FROM duckdb_keywords() WHERE keyword_category='reserved';
//   .output
//
const DUCKDB_KEYWORDS: &[&str] = &[
    "ALL",
    "ANALYSE",
    "ANALYZE",
    "AND",
    "ANY",
    "ARRAY",
    "AS",
    "ASC",
    "ASYMMETRIC",
    "BOTH",
    "CASE",
    "CAST",
    "CHECK",
    "COLLATE",
    "COLUMN",
    "CONSTRAINT",
    "CREATE",
    "DEFAULT",
    "DEFERRABLE",
    "DESC",
    "DESCRIBE",
    "DISTINCT",
    "DO",
    "ELSE",
    "END",
    "EXCEPT",
    "FALSE",
    "FETCH",
    "FOR",
    "FOREIGN",
    "FROM",
    "GRANT",
    "GROUP",
    "HAVING",
    "IN",
    "INITIALLY",
    "INTERSECT",
    "INTO",
    "LATERAL",
    "LEADING",
    "LIMIT",
    "NOT",
    "NULL",
    "OFFSET",
    "ON",
    "ONLY",
    "OR",
    "ORDER",
    "PIVOT",
    "PIVOT_LONGER",
    "PIVOT_WIDER",
    "PLACING",
    "PRIMARY",
    "QUALIFY",
    "REFERENCES",
    "RETURNING",
    "SELECT",
    "SHOW",
    "SOME",
    "SUMMARIZE",
    "SYMMETRIC",
    "TABLE",
    "THEN",
    "TO",
    "TRAILING",
    "TRUE",
    "UNION",
    "UNIQUE",
    "UNPIVOT",
    "USING",
    "VARIADIC",
    "WHEN",
    "WHERE",
    "WINDOW",
    "WITH",
];

#[test]
fn test_sql_keywords() {
    assert!(is_keyword("from"));
    assert!(is_keyword("user"));
}
