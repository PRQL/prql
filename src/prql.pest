// TODO:
// - add functions / tables
// - some rules are silent because we don't strictly need them, but that may be
//   too rushed — maybe we do actually want to know about e.g. comments.
// - parenthesized expressions (which aren't necessarily inline_pipelines) — maybe
//   that should just be changed to a parenthesized expr?


WHITESPACE = _{ " " }
// Need to exclude # in strings (and maybe confirm whether this the syntax we want)
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY) * }

query = _{ SOI ~ NEWLINE* ~ pipeline ~ NEWLINE* ~ EOI }

pipe = _{ NEWLINE | "|" }
pipeline = { transformation ~ (pipe ~ transformation)* }
inline_pipeline = !{ "(" ~ pipeline ~ ")" }

// `ident` is the transformation name
transformation = { WHITESPACE* ~ ident ~ expr }

function = { "func" ~ idents ~ "=" ~ items }

ident = @{ ( ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "." | "_" )* ) }
idents = { ident+ }

// TODO: escapes
// https://pest.rs/book/examples/rust/literals.html
string = { "\"" ~ (ASCII_ALPHANUMERIC)* ~ "\"" }
// string = { "\"" ~ (raw_string | escape)* ~ "\"" }
// raw_string = { (!("\\" | "\"") ~ ASCII_ALPHANUMERIC)+ }
// quoted_string = { "\"" ~ (ASCII_ALPHANUMERIC | " " | "." | "_" | "-" | "\\"  )* ~ "\"" }
number = { (ASCII_DIGIT | ".")+ }
operator = @{ "==" | "!=" | "=" | ">" | "<" | ">=" | "<=" | "+" | "-" | "*" | "/" | "%" }

expr = _{ ( list | named_arg | assign | term | inline_pipeline )+ }
// We could just put these all into `expr`, though possibly we want to retain a
// notion of a valid block (i.e. `+` is not a valid expression).
term = _{ ( ident | operator | number | string ) }
// A non-silent version of `expr`, so we can break up the list. A more general
// version of this would be to make `expr` non-silent, but it would mean
// basically everything would be in an `expr`, which would be verbose to parse.
items = { expr }
// When taking only the next expression
single_expr = _{ ( list | term | inline_pipeline ) }
// If possible, parse a single expr, otherwise parse a list of items, adding a
// layer. In cases like [a, b], we don't need `a` to be Items -> Ident -> a;
// only Ident -> a; but in [a b], we do need a an Items parent.
single_expr_if_possible = _{ (( single_expr ~ &("," | "]") ) | items ) }
list = !{ "[" ~ NEWLINE? ~ single_expr_if_possible ~ ("," ~ NEWLINE? ~ single_expr_if_possible )* ~ ","? ~ NEWLINE? ~ "]" }

// Currently named_args and handled slightly differently to assignments:
// named_args have no whitespace and take one expression immediately after the
// `:`, while assignments take all of the expressions following the `:`. e.g.:
// derive cost: costA + costB
// vs.
// aggregate by:[title]
// ref https://github.com/max-sixty/prql/issues/53, this is not an ideal state,
// since small differences in whitespace have a large different in outcome.
assign = { ident ~ ":" ~ expr }
named_arg = ${ ident ~ ":" ~ single_expr }
