---
source: prql-compiler/tests/integration/main.rs
expression: "# clickhouse:skip (clickhouse doesn't have lag function)\nfrom i=invoices\njoin ii=invoice_items (==invoice_id)\nderive {\n    city = i.billing_city,\n    street = i.billing_address,\n}\ngroup {city, street} (\n    derive total = ii.unit_price * ii.quantity\n    aggregate {\n        num_orders = count_distinct i.invoice_id,\n        num_tracks = sum ii.quantity,\n        total_price = sum total,\n    }\n)\ngroup {city} (\n    sort street\n    window expanding:true (\n        derive {running_total_num_tracks = sum num_tracks}\n    )\n)\nsort city\nderive {num_tracks_last_week = lag 7 num_tracks}\nselect {\n    city,\n    street,\n    num_orders,\n    num_tracks,\n    running_total_num_tracks,\n    num_tracks_last_week\n}\ntake 20\nsort city\n"
input_file: prql-compiler/tests/integration/queries/invoice_totals.prql
---
WITH table_1 AS (
  SELECT
    i.billing_city AS city,
    i.billing_address AS street,
    COUNT(DISTINCT i.invoice_id) AS num_orders,
    COALESCE(SUM(ii.quantity), 0) AS num_tracks
  FROM
    invoices AS i
    JOIN invoice_items AS ii ON i.invoice_id = ii.invoice_id
  GROUP BY
    i.billing_city,
    i.billing_address
),
table_0 AS (
  SELECT
    city,
    street,
    num_orders,
    num_tracks,
    SUM(num_tracks) OVER (
      PARTITION BY city
      ORDER BY
        street ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS running_total_num_tracks,
    LAG(num_tracks, 7) OVER (
      ORDER BY
        city
    ) AS num_tracks_last_week
  FROM
    table_1
  ORDER BY
    city
  LIMIT
    20
)
SELECT
  city,
  street,
  num_orders,
  num_tracks,
  running_total_num_tracks,
  num_tracks_last_week
FROM
  table_0
ORDER BY
  city

