name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  claude:
    # Only run when comment contains @claude
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude'))
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allow pushing commits
      pull-requests: write # Allow commenting and updating PRs
      issues: write # Allow commenting on issues
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # Fix: Checkout PR branch for issue_comment events instead of default branch
          ref:
            ${{ github.event.issue.pull_request && format('refs/pull/{0}/head',
            github.event.issue.number) || github.ref }}
          fetch-depth: 0 # Get more history for better context

      - name: Configure git for Claude
        run: |
          git config --global user.name "Claude Code"
          git config --global user.email "claude@anthropic.com"

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Grant Claude full permissions to execute commands
          # Also include system prompt with project context via claude_args
          claude_args: |
            --allowedTools Bash,Edit,Read,Write,Glob,Grep,WebSearch,WebFetch
            --system-prompt "You are helping with the PRQL project in a GitHub Actions environment.
            Follow the project guidelines in CLAUDE.md.
            When making changes, ensure tests pass with 'task test-all' and lints with 'task test-lint'.

            IMPORTANT for CI failure diagnosis:
            - Use 'gh run list' and 'gh run view' to check CI status
            - Look for specific error messages in failing jobs
            - Check the test output for detailed failure information
            - When fixing issues, verify changes with the appropriate test commands
            - Once local test commands work, push to CI
            - Then iterate between monitoring CI, fixing any remaining issues, monitoring CI
            - Don't return until we're confident that we've done everything we can"
