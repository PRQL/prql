name: test-rust

on:
  # Currently we only run this as `workflow_call`, since `tests.yaml` always calls it.
  workflow_call:
    inputs:
      os:
        type: string
        required: true
      target:
        type: string
        required: true
      features:
        type: string
        required: true
      nightly:
        description: "Whether to run extra tests (this is not nightly rust)"
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  CLICOLOR_FORCE: 1
  # This used to reduce the size of the cargo cache by ~25%. It's not as
  # effective as it once was, as explained in
  # https://github.com/PRQL/prql/pull/2797
  RUSTFLAGS: "-C debuginfo=0"
  RUSTDOCFLAGS: "-Dwarnings"

jobs:
  test-rust:
    runs-on: ${{ inputs.os }}
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
      - name: Run docker compose
        # This can go early because the DBs take a few seconds to start up.
        if: ${{ contains(inputs.features, 'test-dbs-external') }}
        run: docker compose up -d
        working-directory: ./prqlc/prqlc/tests/integration/dbs
      - if: ${{ contains(inputs.target, 'musl') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      - run: rustup target add ${{ inputs.target }}
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: wasm-bindgen-cli
        if: inputs.target == 'wasm32-unknown-unknown'
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-insta
      - run: ./.github/workflows/scripts/set_version.sh
        shell: bash
      - name: 💰 Cache
        uses: Swatinem/rust-cache@v2
        id: cache
        with:
          prefix-key: ${{ env.version }}
          shared-key: rust-${{ inputs.target }}
          # Don't save if empty features, because we run a test with empty
          # features on linux, and don't want to save that instead of the one
          # with all features. I tried including features in the key, but it
          # contains a comma, which isn't allowed; a whole extra task to remove
          # the comma seemed over the top.
          save-if:
            ${{ github.ref == 'refs/heads/main' && inputs.features != '' }}
      - uses: actions/setup-python@v5
        # python isn't natively installed on macos-14, so we need to install it
        if: ${{ inputs.os == 'macos-14' }}
        with:
          python-version: "3.11"
      - name: Free up disk space
        # https://github.com/actions/runner-images/issues/2840
        run: ./.github/workflows/scripts/util_free_space.sh
        # This takes ~3 minutes, so we'd really prefer not to run it on every
        # PR. Trying to run it only when there is no cache hit. We may need to
        # remove that condition and run it whenever we pull the docker images,
        # or explore breaking up the tests more (though that's not easy to get
        # savings on either). Ideally GH will allow for more disk space in the
        # future... (deleting things doesn't actually remove the amount of stuff
        # that GH needs to store, so it's purely performative!)
        if:
          ${{ contains(inputs.features, 'test-dbs-external') &&
          steps.cache.outputs.cache-hit == 'false' }}
      # We split up the test compilation as recommended in
      # https://matklad.github.io/2021/09/04/fast-rust-builds.html
      - name: 🏭 Compile
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: test
          args: >
            --no-run --locked --target=${{ inputs.target }}
            --no-default-features --features=${{ inputs.features }}
      - name: Wait for database
        uses: ifaxity/wait-on-action@v1.2.1
        with:
          resource: "tcp:1433 tcp:3306 tcp:5432 tcp:9004"
          timeout: 60000
        if: ${{ contains(inputs.features, 'test-dbs-external') }}
      - name: 📋 Test
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: insta
          # Here, we also add:
          # - Unreferenced snapshots - `--unreferenced=auto` when testing on
          #   linux & with `test-dbs` feature.
          args: >
            test --target=${{ inputs.target }} --no-default-features
            --features=${{ inputs.features }} ${{ contains(inputs.features,
            'test-dbs') && inputs.target == 'x86_64-unknown-linux-gnu' &&
            '--unreferenced=auto' || '' }}
      - name: 📎 Clippy
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: clippy
          # Note that `--all-targets` doesn't refer to targets like
          # `wasm32-unknown-unknown`; it refers to lib / bin / tests etc.
          #
          args: >
            --all-targets --target=${{ inputs.target }} --no-default-features
            --features=${{ inputs.features }} -- -D warnings
      - name: ⌨️ Fmt
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: fmt
          args: --all --check
      - name: 🗒️ Doc
        # Only running on nightly, because of
        # https://github.com/duckdb/duckdb-rs/issues/179#issuecomment-1710986020.
        if:
          inputs.nightly == 'true' && inputs.target != 'wasm32-unknown-unknown'
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: doc
          # Only run with deps on nightly, since it's much slower, and so far™
          # we haven't seen any errors.
          args:
            --target=${{ inputs.target }} --no-default-features --features=${{
            inputs.features }} ${{ inputs.nightly != 'true' && '--no-deps' || ''
            }}
      - name: Build extra targets for cache
        # When building the cache, we also run with `--all-targets` so that
        # prqlc builds can use the same cache.
        if:
          ${{ github.ref == 'refs/heads/main' && steps.cache.outputs.cache-hit
          == 'false' }}
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: build
          args:
            --all-targets --target=${{ inputs.target }} --no-default-features
            --features=${{ inputs.features }}
