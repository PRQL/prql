name: test-rust

on:
  # Currently we only run this as `workflow_call`, since `pull-request` always calls it.
  workflow_call:
    inputs:
      os:
        type: string
        required: true
      target:
        type: string
        required: true
      features:
        type: string
        required: true
      nightly:
        description: "Whether to run extra tests (this is not nightly rust)"
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  CLICOLOR_FORCE: 1
  # This used to reduce the size of the cargo cache by ~25%. It's not as
  # effective as it once was, as explained in
  # https://github.com/PRQL/prql/pull/2797
  RUSTFLAGS: "-C debuginfo=0"

jobs:
  test-rust:
    runs-on: ${{ inputs.os }}
    steps:
      - name: üìÇ Checkout code
        uses: actions/checkout@v3
      - if: ${{ contains(inputs.target, 'musl') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      - run: rustup target add ${{ inputs.target }}
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: wasm-bindgen-cli
        if: inputs.target == 'wasm32-unknown-unknown'
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-insta
      - run: ./.github/set_version.sh
        shell: bash
      - name: üí∞ Cache
        uses: Swatinem/rust-cache@v2
        id: cache
        with:
          prefix-key: ${{ env.version }}
          shared-key: rust-${{ inputs.target }}-${{ inputs.features }}
          save-if: ${{ github.ref == 'refs/heads/main' }}
        # We split up the test compilation as recommended in
        # https://matklad.github.io/2021/09/04/fast-rust-builds.html
      - name: üè≠ Compile
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: test
          args: >
            --no-run --locked --target=${{ inputs.target }} --features=${{
            inputs.features }}
      - name: Run docker compose
        run: docker compose up -d
        working-directory: ./crates/prql-compiler/tests/integration
        if: ${{ contains(inputs.features, 'test-dbs-external') }}
      - name: Wait for database
        uses: ifaxity/wait-on-action@v1.1.0
        with:
          resource: "tcp:1433 tcp:3306 tcp:5432 tcp:9004"
          timeout: 60000
        if: ${{ contains(inputs.features, 'test-dbs-external') }}
      - name: üìã Test
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: insta
          # Now replaced with whether `nightly` is true, because we only run
          # these on merges, which was making post-merge failures more frequent.
          #
          # # Here, we also add:
          # # - Unreferenced snapshots - `--unreferenced=auto` when testing on
          # #   linux & with `test-dbs` feature.
          # ${{ contains(inputs.features, 'test-dbs') && inputs.target ==
          # 'x86_64-unknown-linux-gnu' && '--unreferenced=auto' || '' }}
          args: >
            test --target=${{ inputs.target }} --features=${{ inputs.features }}
            ${{ inputs.nightly == 'true' && '--unreferenced=auto' || '' }}
      - name: üìé Clippy
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: clippy
          # Note that `--all-targets` doesn't refer to targets like
          # `wasm32-unknown-unknown`; it refers to lib / bin / tests etc.
          #
          args: >
            --all-targets --target=${{ inputs.target }} --features=${{
            inputs.features }} -- -D warnings
      - name: ‚å®Ô∏è Fmt
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: fmt
          args: --all --check
        # As part of https://github.com/PRQL/prql/issues/3145, I'm seeing
        # whether having this means that prqlc builds much faster, without
        # adding much time here, given it has the cache.
      - name: Build
        if:
          ${{ github.ref == 'refs/heads/main' && steps.cache.outputs.cache-hit
          == 'false' }}
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: build
          args:
            --all-targets --target=${{ inputs.target }} --features=${{
            inputs.features }}
