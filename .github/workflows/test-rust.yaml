name: test-rust

on:
  # Currently we only run this as `workflow_call`, since `pull-request` always calls it.
  workflow_call:
    inputs:
      os:
        type: string
      target:
        type: string
        default: ""

env:
  CARGO_TERM_COLOR: always
  CLICOLOR_FORCE: 1
  # This used to reduce the size of the cargo cache by ~25%. It's not as
  # effective as it once was, as explained in
  # https://github.com/PRQL/prql/pull/2797
  RUSTFLAGS: "-C debuginfo=0"

jobs:
  test-rust:
    runs-on: ${{ inputs.os }}
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v3
      - if: ${{ contains(inputs.target, 'musl') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      - run: rustup target add ${{ inputs.target }}
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: wasm-bindgen-cli
        if: inputs.target == 'wasm32-unknown-unknown'
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-insta
      - run: ./.github/set_version.sh
        shell: bash
      - name: 💰 Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ env.version }}
          shared-key: rust-${{ inputs.target}}
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - name: 📎 Clippy
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: clippy
          # Note that `--all-targets` doesn't refer to targets like
          # `wasm32-unknown-unknown`; it refers to lib / bin / tests etc.
          #
          # Autoformatting doesn't make this clear to read, but this tertiary
          # expression states to run:
          # - External DB integration tests — `--features=test-dbs-external`
          #   on Linux
          # - No features on Windows
          # - Internal DB integration tests — `--features=test-dbs` otherwise
          #
          # Below, we also add:
          # - Unreferenced snapshots - `--unreferenced=auto` on Linux
          #
          # We'd like to reenable on Windows, ref https://github.com/wangfenjin/duckdb-rs/issues/179.
          args: >
            --all-targets --target=${{ inputs.target }} --features=${{
            inputs.target == 'x86_64-unknown-linux-gnu' && 'test-dbs-external'
            || inputs.target != 'x86_64-pc-windows-msvc' && 'test-dbs' || '' }}
            -- -D warnings
      - name: ⌨️ Fmt
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: fmt
          args: --all --check
        # We split up the test compilation as recommended in
        # https://matklad.github.io/2021/09/04/fast-rust-builds.html
      - name: 🏭 Compile
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: test
          args: >
            --no-run --locked --target=${{ inputs.target }} --features=${{
            inputs.target == 'x86_64-unknown-linux-gnu' && 'test-dbs-external'
            || inputs.target != 'x86_64-pc-windows-msvc' && 'test-dbs' || '' }}
            }}
      - name: Run docker compose
        run: docker compose up -d
        working-directory: ./crates/prql-compiler/tests/integration
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
      - name: Wait for database
        uses: ifaxity/wait-on-action@v1.1.0
        with:
          resource: "tcp:1433 tcp:3306 tcp:5432 tcp:9004"
          timeout: 60000
        if: ${{ inputs.target == 'x86_64-unknown-linux-gnu' }}
      - name: 📋 Test
        uses: richb-hanover/cargo@v1.1.0
        with:
          command: insta
          # See Compile step for explanation of args
          args: >
            test --target=${{ inputs.target }} --features=${{ inputs.target ==
            'x86_64-unknown-linux-gnu' && 'test-dbs-external' || inputs.target
            != 'x86_64-pc-windows-msvc' && 'test-dbs' || '' }} ${{ inputs.target
            == 'x86_64-unknown-linux-gnu' && '--unreferenced=auto' || '' }}
