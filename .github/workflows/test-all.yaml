name: test-all

# The full suite of tests. These can take up to 20 minutes, so are only run on
# merges or where we're more concerned about a break outside the core libraries.

# To run these on a PR, label with `pr-test-all`.

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - "**/Cargo.*"
      - ".github/workflows/test-all.yaml"
  # Called by pull-request when specifically requested
  workflow_call:

concurrency:
  # See notes in `pull-request.yaml`
  group: ${{ github.workflow }}-${{ github.ref }}-all
  cancel-in-progress: true

jobs:
  test-rust:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target_option: ["", --target=wasm32-unknown-unknown]

    uses: ./.github/workflows/test-rust.yaml
    with:
      os: ${{ matrix.os }}
      target_option: ${{ matrix.target_option }}

  test-php:
    uses: ./.github/workflows/test-php.yaml

  test-python:
    uses: ./.github/workflows/test-python.yaml

  test-java:
    uses: ./.github/workflows/test-java.yaml

  test-js:
    uses: ./.github/workflows/test-js.yaml

  test-elixir:
    uses: ./.github/workflows/test-elixir.yaml

  test-dotnet:
    uses: ./.github/workflows/test-dotnet.yaml

  test-lib:
    uses: ./.github/workflows/test-lib.yaml

  measure-code-cov:
    # Currently disabled due to https://github.com/actions-rs/tarpaulin/issues/21
    if: false
    runs-on: ubuntu-latest
    # Currently this runs `cargo clean` which makes the run taking 4 min. TODO:
    # see whether `skip_clean` is reliable and then add this job to every
    # commit.
    steps:
      - name: ðŸ“‚ Checkout code
        uses: actions/checkout@v3
      - name: ðŸ’° Cache
        uses: Swatinem/rust-cache@v2
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          # TODO: move this exclusion to a config file.
          args: "--workspace --exclude prql-python -- --test-threads 1"
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: cobertura.xml

  time-compilation:
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ“‚ Checkout code
        uses: actions/checkout@v3
      - uses: ./.github/actions/time-compilation
        with:
          use_cache: true

  build-docker:
    # TODO: could extract this into its own workflow and run on any changes to `Dockerfile` on PRs
    # Note that we only build the image here; we then run tests in `nightly.yaml`
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ“‚ Checkout code
        uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v2

      - name: Build
        uses: docker/build-push-action@v4
        with:
          tags: prql:latest
          # Use the GHA cache
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-min-rust-version:
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ“‚ Checkout code
        uses: actions/checkout@v3
      - uses: baptiste0928/cargo-install@next
        with:
          crate: cargo-msrv
        # Note this currently uses a manually mantained key in
        # `prql-compiler/Cargo.toml`, because of
        # https://github.com/foresterre/cargo-msrv/issues/590
      - name: Verify minimum rust version
        # Ideally we'd check all crates, ref https://github.com/foresterre/cargo-msrv/issues/295
        working-directory: prql-compiler
        run: cargo msrv verify
