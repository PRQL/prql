# Boolean: true

true

==>

Query(Statements(PipelineStatement(Pipeline(Boolean))))

# Boolean: false

false

==>

Query(Statements(PipelineStatement(Pipeline(Boolean))))

# Range: 10..20

10..20

==>

Query(Statements(PipelineStatement(Pipeline(RangeExpression))))

# Comment

1 # Hello

==>

Query(Statements(PipelineStatement(Pipeline(Integer))),Comment)

# Docblock

#! Hello
1

==>

Query(Docblock,Statements(PipelineStatement(Pipeline(Integer))))

# Variable declaration

let foo = (1)

==>

Query(Statements(VariableDeclaration(VariableName,Equals,NestedPipeline(Pipeline(Integer)))))

# Function declaration

let my_func = arg1 -> arg1

==>

Query(Statements(VariableDeclaration(VariableName,Equals,Lambda(LambdaParam,Identifier))))

# Function declaration with two args

let my_func = arg1 arg2 -> arg1 + arg2

==>

Query(Statements(VariableDeclaration(VariableName,Equals,Lambda(LambdaParam,LambdaParam,BinaryExpression(Identifier,ArithOp,Identifier)))))

# Simple pipeline

from foo | select bar

==>

Query(Statements(PipelineStatement(Pipeline(CallExpression(Identifier,Identifier),CallExpression(Identifier,Identifier)))))

# Derive

derive {
  transaction_fees = 0.8,
  income = total - transaction_fees
}

==>

Query(Statements(PipelineStatement(Pipeline(CallExpression(Identifier,TupleExpression(AssignCall(Equals,Float),AssignCall(Equals,BinaryExpression(Identifier,ArithOp,Identifier))))))))
