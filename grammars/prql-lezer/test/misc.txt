# Boolean: true

test true

==>

Query(Pipeline(CallExpression(Identifier,ArgList(Boolean))))

# Boolean: false

test false

==>

Query(Pipeline(CallExpression(Identifier,ArgList(Boolean))))

# Null

test null

==>

Query(Pipeline(CallExpression(Identifier,ArgList(null))))

# Keyword: this

test this

==>

Query(Pipeline(CallExpression(Identifier,ArgList(this))))

# Keyword: that

test that

==>

Query(Pipeline(CallExpression(Identifier,ArgList(that))))

# Range: 10..20

test 10..20

==>

Query(Pipeline(CallExpression(Identifier,ArgList(RangeExpression))))

# Comment

test 1 # Hello

==>

Query(Pipeline(CallExpression(Identifier,ArgList(Integer))),Comment)

# Two comments

# Hello
# Bar

==>

Query(Comment,Comment)

# Docblock

#! Hello
test 1

==>

Query(Docblock,Pipeline(CallExpression(Identifier,ArgList(Integer))))

# Variable declaration

let foo = (1)

==>

Query(VariableDeclaration(let,VariableName,Equals,NestedPipeline(Pipeline(Integer))))

# Function declaration

let my_func = arg1 -> arg1

==>

Query(VariableDeclaration(let,VariableName,Equals,Lambda(LambdaParam,Identifier)))

# Function declaration with two args

let my_func = arg1 arg2 -> arg1 + arg2

==>

Query(VariableDeclaration(let,VariableName,Equals,Lambda(LambdaParam,LambdaParam,BinaryExpression(Identifier,ArithOp,Identifier))))

# Function declaration with type annotation

let my_func = arg1<int32> -> arg1

==>

Query(VariableDeclaration(let,VariableName,Equals,Lambda(LambdaParam(TypeDefinition(TypeTerm)),Identifier)))

# Simple pipeline

from foo | select bar

==>

Query(Pipeline(CallExpression(Identifier,ArgList(Identifier)),CallExpression(Identifier,ArgList(Identifier))))

# Derive

derive {
  transaction_fees = 0.8,
  income = total - transaction_fees
}

==>

Query(Pipeline(CallExpression(Identifier,ArgList(TupleExpression(AssignCall(Equals,Float),AssignCall(Equals,BinaryExpression(Identifier,ArithOp,Identifier)))))))

# Nested pipeline

group customer_id (
  aggregate {
    average total
  }
)

==>

Query(Pipeline(CallExpression(Identifier,ArgList(Identifier,NestedPipeline(Pipeline(CallExpression(Identifier,ArgList(TupleExpression(CallExpression(Identifier,ArgList(Identifier)))))))))))

# Tabs as spaces

let		foo		=		(1)

==>

Query(VariableDeclaration(let,VariableName,Equals,NestedPipeline(Pipeline(Integer))))
