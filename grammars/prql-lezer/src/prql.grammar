// TODO:
// - Do we want to highlight built-in transforms such as `from` differently to
//   normal functions?
// - A few small TODOs included below

@precedence {
  prefix,
  times @left,
  plus @left,
  compare @left,
  and @left,
  or @left
}

@top Query { statements }

@skip { space | Comment | Docblock | wrappedLine }

statements { newline* QueryDefinition? Module? Annotation? VariableDeclaration* pipelineStatement? end? }

QueryDefinition { @specialize<identPart, "prql"> NamedArg+ newline+ }

Module { kw<"module"> Identifier "{" statements "}" }

pipelineStatement { Pipeline (~ambigNewline newline+ | end)}

Pipeline { CallExpression (pipe CallExpression)* }

pipe { "|" | ~ambigNewline newline+ }

TupleExpression { "{" newline* tupleItem (("," newline*) tupleItem)* ","? newline* "}" }

tupleItem { DeclarationTuple | expression | CallExpression | CaseBranch }

Annotation { "@{" commaSep<Declaration>? "}" newline }

// Ideally we would force a space after `Identifier` to prevent an invalid s-string
// being parsed as a CallExpression, e.g. `s"{a"` -> `s` & `"{a"'. But we
// can't seem to force a space because it's in our skip, and I can't see
// a way of changing the skip expression to only specialize on a single item
CallExpression { Identifier ArgList { (NamedArg | Declaration | test)+ } }

NamedArg { ArgumentName { identPart } ":" expression }
Declaration { DeclarationItem { identPart } "=" expression }
DeclarationTuple { DeclarationItem { identPart } "=" expression }
CaseBranch { expression "=>" expression }
// Possibly we could only accept case branches inside the TupleExpression?
CaseExpression { @specialize<identPart, "case"> TupleExpression }

NestedPipeline { "(" newline* Pipeline ~ambigNewline newline? ")" }

commaSep<expr> { newline* expr ("," newline* expr newline*)* ","? }
ArithOp<expr> { expr }
CompareOp<expr> { expr }
LogicOp<expr> { expr }

// The name "test" here means equality testing. It is name used in the Python grammar.
test { testInner }

testInner { binaryTest | unaryTest | expression }

binaryTest[@name="BinaryExpression"] {
  testInner !or LogicOp<"||" | "??"> testInner |
  testInner !and LogicOp<"&&"> testInner |
  testInner !compare (CompareOp<"==" | "!=" | "~=" | ">=" | "<=" | ">" | "<"> | kw<"in">) testInner
}

unaryTest[@name="UnaryExpression"] { kw<"!"> testInner }

expression[@isGroup=Expression] {
  kw<"this"> | kw<"that"> |
  kw<"null"> |
  BinaryExpression |
  UnaryExpression |
  ArrayExpression |
  TupleExpression |
  NestedPipeline |
  CaseExpression |
  DateTime |
  Parameter |
  ParenthesizedExpression |
  RangeExpression |
  Identifier |
  boolean |
  number |
  String | FString | RString | SString |
  TimeUnit
}

boolean { @specialize[@name=Boolean]<identPart, "true" | "false"> }

ArrayExpression { "[" commaSep<test | "*" expression>? "]" }

BinaryExpression {
  expression !plus ArithOp<"+" | "-"> expression |
  expression !times ArithOp<"*" | "/" | "%" | "//"> expression
}

ParenthesizedExpression { "(" expression ")" }

UnaryExpression {
  !prefix ArithOp<"+" | "-"> expression |
  !prefix CompareOp<"=="> Identifier
}

// Because this is outside tokens, we can't disallow whitespace.
// It's outside tokens because otherwise it conflicts with Identifier
Identifier { identPart ("." (identPart | "*"))* }
VariableName { identPart }

number { Integer | Float }

kw<term> { @specialize[@name={term}]<identPart, term> }

VariableDeclaration { kw<"let"> VariableName "=" (NestedPipeline (newline+ | end) | Lambda) }

Lambda { LambdaParam* "->" expression (newline+ | end) }
TypeDefinition { "<" TypeName ("|" TypeName)* ">" }
TypeName { identPart TypeDefinition? }
LambdaParam { identPart TypeDefinition? (":" expression)? }

@skip {} {
  // Couldn't manage to do these & the interpolated as a template.
  String {
    '"""' (stringContentDouble | Escape)* '"""' |
    "'''" (stringContentSingle | Escape)* "'''" |
    '"' (stringContentDouble | Escape)* '"' |
    "'" (stringContentSingle | Escape)* "'"
  }
}

@tokens {
  date { @digit+ "-" @digit+ "-" @digit+ }
  time { @digit+ ":" @digit+ (":" @digit+ ("." @digit+)?)? }
  // We can't seem to set the number of digits, so this will allow any
  // combination of digits & hyphens.
  DateTime { "@" (date | time | date "T" time ("Z" | ("-" | "+") @digit+ ":" @digit+)?) }
  TimeUnit { @digit+ ("years" | "months" | "weeks" | "days" | "hours" | "minutes" | "seconds" | "milliseconds" | "microseconds") }
  identifierChar { @asciiLetter | $[_\u{a1}-\u{10ffff}] }
  identPart { identifierChar (identifierChar | "_" | @digit)* }

  hex { @digit | $[a-fA-F] }

  Integer {
    @digit (@digit | "_")* ("e" ("+" | "-")? Integer)? |
    "0x" (hex | "_")+ |
    "0b" $[01_]+ |
    "0o" $[0-7_]+
  }

  Float { @digit (@digit | "_")* "." @digit (@digit | "_")* ("e" Integer)? }
  // TODO: This is not as precise as PRQL, which doesn't allow trailing
  // underscores and allows no digit before the decimal point.
  space { $[ \t] }

  Escape {
    "\\" ("x" hex hex | "u" "{" hex+ "}" | $[bfnrt])
  }

  Parameter { "$" (@digit+ | identPart) }

  stringContentSingle { ![\\']+ }

  stringContentDouble { ![\\"]+ }

  Docblock { "#!" ![\n]* }
  Comment { "#" ![\n]* }
  @precedence { Docblock, Comment }

  end { @eof }
  lineWrap { "\\" }
  wrappedLine { newline+ (Comment newline+)* lineWrap }
  newline { "\n" }

  // TODO: Because this can also be used to compile to BETWEEN, ranges should
  // allow any literal, and arguably any expression.
  RangeExpression { @digit+ ".." @digit+ }

  // TODO: not getting the interpolations highlighted; it just shows the whole
  // string as a string, because these are all within the `@tokens` block. But
  // they need to be within this block, because it's not possible to have
  // negations (e.g. `![{'}` outside it.
  stringInterpolatedSingle { $['] (![{'] | interpolationInnerSingle)* $['] }
  stringInterpolatedDouble { $["] (![{"] | interpolationInnerDouble)* $["] }

  interpolationInnerSingle { "{" ![}']* "}" }
  interpolationInnerDouble { "{" ![}"]* "}" }

  interpolatedString<prefix> { prefix (stringInterpolatedDouble | stringInterpolatedSingle) }

  "="[@name=Equals]

  FString { interpolatedString<'f'> }
  RString { interpolatedString<'r'> }
  SString { interpolatedString<'s'> }

  // We need to give precedence to `Op_bin` so we don't get `x+y` as `x` & `+y`.
  // R, S & F strings have precedence over idents beginning with r / s / f (we could
  // use specialize but I think means we need to redefine `String` for each)
  @precedence { RangeExpression, Float, TimeUnit, Integer }
  @precedence { FString, RString, SString, identPart }
}

@external propSource prqlHighlight from "./highlight"

@detectDelim
