---
source: prql-compiler/prqlc/tests/test.rs
info:
  program: prqlc
  args:
    - shell-completion
    - zsh
---
success: true
exit_code: 0
----- stdout -----
#compdef prqlc

autoload -U is-at-least

_prqlc() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_prqlc_commands" \
"*::: :->prqlc" \
&& ret=0
    case $state in
    (prqlc)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:prqlc-command-$line[1]:"
        case $line[1] in
            (parse)
_arguments "${_arguments_options[@]}" \
'--format=[]:FORMAT:(json yaml)' \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help]' \
'--help[Print help]' \
'::input:_files' \
'::output:_files' \
'::main_path -- Identifier of the main pipeline:_files' \
&& ret=0
;;
(fmt)
_arguments "${_arguments_options[@]}" \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help]' \
'--help[Print help]' \
'::input:_files' \
'::output:_files' \
'::main_path -- Identifier of the main pipeline:_files' \
&& ret=0
;;
(annotate)
_arguments "${_arguments_options[@]}" \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help]' \
'--help[Print help]' \
'::input:_files' \
'::output:_files' \
'::main_path -- Identifier of the main pipeline:_files' \
&& ret=0
;;
(debug)
_arguments "${_arguments_options[@]}" \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help]' \
'--help[Print help]' \
'::input:_files' \
'::output:_files' \
'::main_path -- Identifier of the main pipeline:_files' \
&& ret=0
;;
(resolve)
_arguments "${_arguments_options[@]}" \
'--format=[]:FORMAT:(json yaml)' \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help]' \
'--help[Print help]' \
'::input:_files' \
'::output:_files' \
'::main_path -- Identifier of the main pipeline:_files' \
&& ret=0
;;
(sql:preprocess)
_arguments "${_arguments_options[@]}" \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help]' \
'--help[Print help]' \
'::input:_files' \
'::output:_files' \
'::main_path -- Identifier of the main pipeline:_files' \
&& ret=0
;;
(sql:anchor)
_arguments "${_arguments_options[@]}" \
'--format=[]:FORMAT:(json yaml)' \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::input:_files' \
'::output:_files' \
'::main_path -- Identifier of the main pipeline:_files' \
&& ret=0
;;
(compile)
_arguments "${_arguments_options[@]}" \
'-t+[]:TARGET: ' \
'--target=[]:TARGET: ' \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'--hide-signature-comment[]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::input:_files' \
'::output:_files' \
'::main_path -- Identifier of the main pipeline:_files' \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'--no-format[]' \
'--no-signature[]' \
'-h[Print help]' \
'--help[Print help]' \
':path -- Directory or file to watch for changes:' \
&& ret=0
;;
(list-targets)
_arguments "${_arguments_options[@]}" \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(shell-completion)
_arguments "${_arguments_options[@]}" \
'--color=[Controls when to use color]:WHEN:(auto always never)' \
'-h[Print help]' \
'--help[Print help]' \
':shell:(bash elvish fig fish nushell powershell zsh)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_prqlc__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:prqlc-help-command-$line[1]:"
        case $line[1] in
            (parse)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(fmt)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(annotate)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(debug)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(resolve)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(sql:preprocess)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(sql:anchor)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(compile)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list-targets)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(shell-completion)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_prqlc_commands] )) ||
_prqlc_commands() {
    local commands; commands=(
'parse:Parse into PL AST' \
'fmt:Parse & generate PRQL code back' \
'annotate:Parse, resolve & combine source with comments annotating relation type' \
'debug:Parse & resolve, but don'\''t lower into RQ' \
'resolve:Parse, resolve & lower into RQ' \
'sql:preprocess:Parse, resolve, lower into RQ & preprocess SRQ' \
'sql:anchor:Parse, resolve, lower into RQ & preprocess & anchor SRQ' \
'compile:Parse, resolve, lower into RQ & compile to SQL' \
'watch:Watch a directory and compile .prql files to .sql files' \
'list-targets:Show available compile target names' \
'shell-completion:Print a shell completion for supported shells' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'prqlc commands' commands "$@"
}
(( $+functions[_prqlc__annotate_commands] )) ||
_prqlc__annotate_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc annotate commands' commands "$@"
}
(( $+functions[_prqlc__help__annotate_commands] )) ||
_prqlc__help__annotate_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help annotate commands' commands "$@"
}
(( $+functions[_prqlc__compile_commands] )) ||
_prqlc__compile_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc compile commands' commands "$@"
}
(( $+functions[_prqlc__help__compile_commands] )) ||
_prqlc__help__compile_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help compile commands' commands "$@"
}
(( $+functions[_prqlc__debug_commands] )) ||
_prqlc__debug_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc debug commands' commands "$@"
}
(( $+functions[_prqlc__help__debug_commands] )) ||
_prqlc__help__debug_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help debug commands' commands "$@"
}
(( $+functions[_prqlc__fmt_commands] )) ||
_prqlc__fmt_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc fmt commands' commands "$@"
}
(( $+functions[_prqlc__help__fmt_commands] )) ||
_prqlc__help__fmt_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help fmt commands' commands "$@"
}
(( $+functions[_prqlc__help_commands] )) ||
_prqlc__help_commands() {
    local commands; commands=(
'parse:Parse into PL AST' \
'fmt:Parse & generate PRQL code back' \
'annotate:Parse, resolve & combine source with comments annotating relation type' \
'debug:Parse & resolve, but don'\''t lower into RQ' \
'resolve:Parse, resolve & lower into RQ' \
'sql:preprocess:Parse, resolve, lower into RQ & preprocess SRQ' \
'sql:anchor:Parse, resolve, lower into RQ & preprocess & anchor SRQ' \
'compile:Parse, resolve, lower into RQ & compile to SQL' \
'watch:Watch a directory and compile .prql files to .sql files' \
'list-targets:Show available compile target names' \
'shell-completion:Print a shell completion for supported shells' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'prqlc help commands' commands "$@"
}
(( $+functions[_prqlc__help__help_commands] )) ||
_prqlc__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help help commands' commands "$@"
}
(( $+functions[_prqlc__help__list-targets_commands] )) ||
_prqlc__help__list-targets_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help list-targets commands' commands "$@"
}
(( $+functions[_prqlc__list-targets_commands] )) ||
_prqlc__list-targets_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc list-targets commands' commands "$@"
}
(( $+functions[_prqlc__help__parse_commands] )) ||
_prqlc__help__parse_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help parse commands' commands "$@"
}
(( $+functions[_prqlc__parse_commands] )) ||
_prqlc__parse_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc parse commands' commands "$@"
}
(( $+functions[_prqlc__help__resolve_commands] )) ||
_prqlc__help__resolve_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help resolve commands' commands "$@"
}
(( $+functions[_prqlc__resolve_commands] )) ||
_prqlc__resolve_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc resolve commands' commands "$@"
}
(( $+functions[_prqlc__help__shell-completion_commands] )) ||
_prqlc__help__shell-completion_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help shell-completion commands' commands "$@"
}
(( $+functions[_prqlc__shell-completion_commands] )) ||
_prqlc__shell-completion_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc shell-completion commands' commands "$@"
}
(( $+functions[_prqlc__help__sql:anchor_commands] )) ||
_prqlc__help__sql:anchor_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help sql:anchor commands' commands "$@"
}
(( $+functions[_prqlc__sql:anchor_commands] )) ||
_prqlc__sql:anchor_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc sql:anchor commands' commands "$@"
}
(( $+functions[_prqlc__help__sql:preprocess_commands] )) ||
_prqlc__help__sql:preprocess_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help sql:preprocess commands' commands "$@"
}
(( $+functions[_prqlc__sql:preprocess_commands] )) ||
_prqlc__sql:preprocess_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc sql:preprocess commands' commands "$@"
}
(( $+functions[_prqlc__help__watch_commands] )) ||
_prqlc__help__watch_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc help watch commands' commands "$@"
}
(( $+functions[_prqlc__watch_commands] )) ||
_prqlc__watch_commands() {
    local commands; commands=()
    _describe -t commands 'prqlc watch commands' commands "$@"
}

if [ "$funcstack[1]" = "_prqlc" ]; then
    _prqlc "$@"
else
    compdef _prqlc prqlc
fi

----- stderr -----

