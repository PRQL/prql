# From https://github.com/qorrect/PyPrql/blob/main/resources/stdlib.prql
# (discussed on Discord that it's OK to copy here)
#
# We'll evaluate how we organize files, and what is a PRQL function vs encoded
# in the transpiler.

# Aggregate Functions

func min <scalar|column> column ->  s"MIN({column})"
func max <scalar|column> column ->  s"MAX({column})"
func sum <scalar|column> column ->  s"SUM({column})"
func avg <scalar|column> column ->  s"AVG({column})"
func stddev <scalar|column> column ->  s"STDDEV({column})"
func average <scalar|column> column ->  s"AVG({column})"
func count <scalar|column> non_null:s"*" ->  s"COUNT({non_null})"
# TODO: Possibly make this into `count distinct:true` (or like `distinct:` as an
# abbreviation of that?)
func count_distinct <scalar|column> column ->  s"COUNT(DISTINCT `{column}`)"

# TODO: Introduce a notation for getting start and end out of a ranges
# could be range.0? or range.start? But to make this happen, we need to make
# changes to how variables are resolved.
func in<scalar> range value ->  s"{value} BETWEEN {range}"

# Casting functions

func as<scalar> column type ->  s"CAST({column} AS {type})"

# Window functions
func lag<column> offset column ->  s"LAG({column}, {offset})"
func lead<column> offset column ->  s"LEAD({column}, {offset})"
func first<column> offset column ->  s"FIRST_VALUE({column}, {offset})"
func last<column> offset column ->  s"LAST_VALUE({column}, {offset})"
func rank<column> ->  s"RANK()"
func rank_dense<column> ->  s"DENSE_RANK()"
func row_number<column> ->  s"ROW_NUMBER()"

# Logical functions
func coalesce value default -> s"COALESCE({value}, {default})"
