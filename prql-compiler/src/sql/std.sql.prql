#! Implementation of `std` module.
#!
#! This file is not really PRQL.
#! It can contain only:
#! - functions declarations that don't have named params and s-string-only body,
#! - module declarations whose names correspond to sql dialect names.
#!
#! Functions can define `binding_strength` annotation, which signifies how much
#! precedence does the top-level operation in the s-string provide.
#! This value defaults to 100 (high precedence).
#!
#! S-strings can define required binding strength of the interpolated expression.
#! This value defaults to binding strength of the function.



# Aggregation functions
@{window_frame=true}
let min = column -> s"MIN({column:0})"

@{window_frame=true}
let max = column -> s"MAX({column:0})"

@{window_frame=true, coalesce="0"}
let sum = column -> s"SUM({column:0})"

@{window_frame=true}
let average = column -> s"AVG({column:0})"

@{window_frame=true}
let stddev = column -> s"STDDEV({column:0})"

@{window_frame=true, coalesce="TRUE"}
let every = column -> s"BOOL_AND({column:0})"

@{window_frame=true, coalesce="FALSE"}
let any = column -> s"BOOL_OR({column:0})"

@{window_frame=true, coalesce="''"}
let concat_array = column -> s"STRING_AGG({column:0}, '')"

@{window_frame=true}
let count = column -> s"COUNT(*)"

@{window_frame=true}
let count_distinct = column -> s"COUNT(DISTINCT {column:0})"

# Window functions
let lag = offset column -> s"LAG({column:0}, {offset:0})"

let lead = offset column -> s"LEAD({column:0}, {offset:0})"

let first = column -> s"FIRST_VALUE({column:0})"

let last = column -> s"LAST_VALUE({column:0})"

let rank = -> s"RANK()"

let rank_dense = -> s"DENSE_RANK()"

let row_number = -> s"ROW_NUMBER()"

# Other functions
let round = n_digits column -> s"ROUND({column:0}, {n_digits:0})"
let as = `type` column -> s"CAST({column:0} AS {type:0})"

# String functions
let lower = column -> s"LOWER({column:0})"
let upper = column -> s"UPPER({column:0})"

# Source-reading functions, primarily for DuckDB
let read_parquet = source -> s"read_parquet({source:0})"
let read_csv = source -> s"read_csv_auto({source:0})"

@{binding_strength=11}
let mul = l r -> null

@{binding_strength=100}
let div_i = l r -> s"FLOOR(ABS({l:11} / {r:11})) * SIGN({l:0}) * SIGN({r:0})"

# We have a simple float division by default, but it can be overridden by dialects.
@{binding_strength=11}
let div_f = l r -> s"({l} / {r})"

@{binding_strength=11}
let mod = l r -> s"{l} % {r}"

@{binding_strength=10}
let add = l r -> null

@{binding_strength=10}
let sub = l r -> null

@{binding_strength=6}
let eq = l r -> null

@{binding_strength=6}
let ne = l r -> null

@{binding_strength=6}
let gt = l r -> null

@{binding_strength=6}
let lt = l r -> null

@{binding_strength=6}
let gte = l r -> null

@{binding_strength=6}
let lte = l r -> null

@{binding_strength=3}
let and = l r -> null

@{binding_strength=2}
let or = l r -> null

let coalesce = l r -> s"COALESCE({l:0}, {r:0})"

let regex_search = text pattern -> s"REGEXP({text:0}, {pattern:0})"

@{binding_strength=13}
let neg = l -> s"-{l}"

@{binding_strength=4}
let not = l -> s"NOT {l}"

module ansi {
  @{binding_strength=11}
  let div_f = l r -> s"({l} * 1.0 / {r})"
}

module bigquery {
  @{binding_strength=11}
  let div_f = l r -> s"({l} * 1.0 / {r})"

  let regex_search = text pattern -> s"REGEXP_CONTAINS({text:0}, {pattern:0})"
}

module clickhouse {
  # https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions#divide
  @{binding_strength=11}
  let div_f = l r -> s"({l} / {r})"

  @{binding_strength=11}
  let div_i = l r -> s"({l} DIV {r})"

  let regex_search = text pattern -> s"match({text:0}, {pattern:0})"
}

module duckdb {
  @{binding_strength=11}
  let div_f = l r -> s"({l} / {r})"

  @{binding_strength=11}
  let div_i = l r -> s"TRUNC({l:11} / {r:11})"

  let regex_search = text pattern -> s"REGEXP_MATCHES({text:0}, {pattern:0})"
}

module mssql {
  @{binding_strength=11}
  let div_f = l r -> s"({l} * 1.0 / {r})"

  let regex_search = text pattern -> null
}

module mysql {
  @{binding_strength=11}
  let div_f = l r -> s"({l} / {r})"

  @{binding_strength=11}
  let div_i = l r -> s"({l} DIV {r})"

  @{binding_strength=100}
  let mod = l r -> s"ROUND(MOD({l:0}, {r:0}))"

  # 'c' for case-sensitive
  let regex_search = text pattern -> s"REGEXP_LIKE({text:0}, {pattern:0}, 'c')"
}

module postgres {
  @{binding_strength=11}
  let div_f = l r -> s"({l} * 1.0 / {r})"

  @{binding_strength=100}
  let div_i = l r -> s"TRUNC({l:11} / {r:11})"

  @{binding_strength=100}
  let round = n_digits column -> s"ROUND(({column:0})::numeric, {n_digits:0})"

  @{binding_strength=9}
  let regex_search = text pattern -> s"{text} ~ {pattern}"
}

module sqlite {
  @{window_frame=true, coalesce="TRUE", binding_strength=6}
  let every = column -> s"MIN({column:0}) > 0"

  @{window_frame=true, coalesce="FALSE", binding_strength=6}
  let any = column -> s"MAX({column:0}) > 0"

  @{window_frame=true, coalesce="''"}
  let concat_array = column -> s"GROUP_CONCAT({column:0}, '')"

  @{binding_strength=11}
  let div_f = l r -> s"({l} * 1.0 / {r})"

  @{binding_strength=100}
  let div_i = l r -> s"ROUND(ABS({l:11} / {r:11}) - 0.5) * SIGN({l:0}) * SIGN({r:0})"

  @{binding_strength=9}
  let regex_search = text pattern -> s"{text} REGEXP {pattern}"
}

module snowflake {
  # https://docs.snowflake.com/en/sql-reference/operators-arithmetic#division
  @{binding_strength=11}
  let div_f = l r -> s"({l} / {r})"
}
