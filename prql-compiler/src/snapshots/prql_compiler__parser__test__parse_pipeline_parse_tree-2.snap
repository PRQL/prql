---
source: prql-compiler/src/parser.rs
expression: "parse_tree_of_str(r#\"\n            from employees\n            filter country == \"USA\"\n            \"#.trim(),\n        Rule::pipeline).unwrap()"
---
[
    Pair {
        rule: pipeline,
        span: Span {
            str: "from employees\n            filter country == \"USA\"",
            start: 0,
            end: 50,
        },
        inner: [
            Pair {
                rule: func_curry,
                span: Span {
                    str: "from employees",
                    start: 0,
                    end: 14,
                },
                inner: [
                    Pair {
                        rule: ident,
                        span: Span {
                            str: "from",
                            start: 0,
                            end: 4,
                        },
                        inner: [],
                    },
                    Pair {
                        rule: expr,
                        span: Span {
                            str: "employees",
                            start: 5,
                            end: 14,
                        },
                        inner: [
                            Pair {
                                rule: ident,
                                span: Span {
                                    str: "employees",
                                    start: 5,
                                    end: 14,
                                },
                                inner: [],
                            },
                        ],
                    },
                ],
            },
            Pair {
                rule: func_curry,
                span: Span {
                    str: "filter country == \"USA\"",
                    start: 27,
                    end: 50,
                },
                inner: [
                    Pair {
                        rule: ident,
                        span: Span {
                            str: "filter",
                            start: 27,
                            end: 33,
                        },
                        inner: [],
                    },
                    Pair {
                        rule: expr,
                        span: Span {
                            str: "country == \"USA\"",
                            start: 34,
                            end: 50,
                        },
                        inner: [
                            Pair {
                                rule: ident,
                                span: Span {
                                    str: "country",
                                    start: 34,
                                    end: 41,
                                },
                                inner: [],
                            },
                            Pair {
                                rule: operator_compare,
                                span: Span {
                                    str: "==",
                                    start: 42,
                                    end: 44,
                                },
                                inner: [],
                            },
                            Pair {
                                rule: string,
                                span: Span {
                                    str: "\"USA\"",
                                    start: 45,
                                    end: 50,
                                },
                                inner: [
                                    Pair {
                                        rule: string_inner,
                                        span: Span {
                                            str: "USA",
                                            start: 46,
                                            end: 49,
                                        },
                                        inner: [],
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        ],
    },
]
