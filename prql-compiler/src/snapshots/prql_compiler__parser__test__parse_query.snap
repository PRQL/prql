---
source: prql-compiler/src/parser.rs
expression: "stmts_of_string(r#\"\nfrom employees\nfilter country == \"USA\"                        # Each line transforms the previous result.\nderive [                                      # This adds columns / variables.\n  gross_salary = salary + payroll_tax,\n  gross_cost =   gross_salary + benefits_cost # Variables can use other variables.\n]\nfilter gross_cost > 0\ngroup [title, country] (\naggregate [               # `by` are the columns to group by.\n                   average salary,            # These are aggregation calcs run on each group.\n                   sum salary,\n                   average gross_salary,\n                   sum gross_salary,\n                   average gross_cost,\n  sum_gross_cost = sum gross_cost,\n  ct             = count,\n] )\nsort sum_gross_cost\nfilter ct > 200\ntake 20\n    \"#.trim())?"
---
- Pipeline:
    Pipeline:
      exprs:
        - FuncCall:
            name:
              Ident:
                namespace: ~
                ident: from
            args:
              - Ident:
                  namespace: ~
                  ident: employees
            named_args: {}
        - FuncCall:
            name:
              Ident:
                namespace: ~
                ident: filter
            args:
              - Binary:
                  left:
                    Ident:
                      namespace: ~
                      ident: country
                  op: Eq
                  right:
                    Literal:
                      String: USA
            named_args: {}
        - FuncCall:
            name:
              Ident:
                namespace: ~
                ident: derive
            args:
              - List:
                  - Binary:
                      left:
                        Ident:
                          namespace: ~
                          ident: salary
                      op: Add
                      right:
                        Ident:
                          namespace: ~
                          ident: payroll_tax
                    alias: gross_salary
                  - Binary:
                      left:
                        Ident:
                          namespace: ~
                          ident: gross_salary
                      op: Add
                      right:
                        Ident:
                          namespace: ~
                          ident: benefits_cost
                    alias: gross_cost
            named_args: {}
        - FuncCall:
            name:
              Ident:
                namespace: ~
                ident: filter
            args:
              - Binary:
                  left:
                    Ident:
                      namespace: ~
                      ident: gross_cost
                  op: Gt
                  right:
                    Literal:
                      Integer: 0
            named_args: {}
        - FuncCall:
            name:
              Ident:
                namespace: ~
                ident: group
            args:
              - List:
                  - Ident:
                      namespace: ~
                      ident: title
                  - Ident:
                      namespace: ~
                      ident: country
              - FuncCall:
                  name:
                    Ident:
                      namespace: ~
                      ident: aggregate
                  args:
                    - List:
                        - FuncCall:
                            name:
                              Ident:
                                namespace: ~
                                ident: average
                            args:
                              - Ident:
                                  namespace: ~
                                  ident: salary
                            named_args: {}
                        - FuncCall:
                            name:
                              Ident:
                                namespace: ~
                                ident: sum
                            args:
                              - Ident:
                                  namespace: ~
                                  ident: salary
                            named_args: {}
                        - FuncCall:
                            name:
                              Ident:
                                namespace: ~
                                ident: average
                            args:
                              - Ident:
                                  namespace: ~
                                  ident: gross_salary
                            named_args: {}
                        - FuncCall:
                            name:
                              Ident:
                                namespace: ~
                                ident: sum
                            args:
                              - Ident:
                                  namespace: ~
                                  ident: gross_salary
                            named_args: {}
                        - FuncCall:
                            name:
                              Ident:
                                namespace: ~
                                ident: average
                            args:
                              - Ident:
                                  namespace: ~
                                  ident: gross_cost
                            named_args: {}
                        - FuncCall:
                            name:
                              Ident:
                                namespace: ~
                                ident: sum
                            args:
                              - Ident:
                                  namespace: ~
                                  ident: gross_cost
                            named_args: {}
                          alias: sum_gross_cost
                        - Ident:
                            namespace: ~
                            ident: count
                          alias: ct
                  named_args: {}
            named_args: {}
        - FuncCall:
            name:
              Ident:
                namespace: ~
                ident: sort
            args:
              - Ident:
                  namespace: ~
                  ident: sum_gross_cost
            named_args: {}
        - FuncCall:
            name:
              Ident:
                namespace: ~
                ident: filter
            args:
              - Binary:
                  left:
                    Ident:
                      namespace: ~
                      ident: ct
                  op: Gt
                  right:
                    Literal:
                      Integer: 200
            named_args: {}
        - FuncCall:
            name:
              Ident:
                namespace: ~
                ident: take
            args:
              - Literal:
                  Integer: 20
            named_args: {}

