---
source: prql-compiler/src/parser.rs
expression: "parse_tree_of_str(\"func plus_one x ->  x + 1\", Rule::func_def)?"
---
[
    Pair {
        rule: func_def,
        span: Span {
            str: "func plus_one x ->  x + 1",
            start: 0,
            end: 25,
        },
        inner: [
            Pair {
                rule: func_def_name,
                span: Span {
                    str: "plus_one ",
                    start: 5,
                    end: 14,
                },
                inner: [
                    Pair {
                        rule: ident,
                        span: Span {
                            str: "plus_one",
                            start: 5,
                            end: 13,
                        },
                        inner: [],
                    },
                ],
            },
            Pair {
                rule: func_def_params,
                span: Span {
                    str: "x ",
                    start: 14,
                    end: 16,
                },
                inner: [
                    Pair {
                        rule: func_def_param,
                        span: Span {
                            str: "x ",
                            start: 14,
                            end: 16,
                        },
                        inner: [
                            Pair {
                                rule: ident,
                                span: Span {
                                    str: "x",
                                    start: 14,
                                    end: 15,
                                },
                                inner: [],
                            },
                        ],
                    },
                ],
            },
            Pair {
                rule: expr,
                span: Span {
                    str: "x + 1",
                    start: 20,
                    end: 25,
                },
                inner: [
                    Pair {
                        rule: expr_coalesce,
                        span: Span {
                            str: "x + 1",
                            start: 20,
                            end: 25,
                        },
                        inner: [
                            Pair {
                                rule: expr_compare,
                                span: Span {
                                    str: "x + 1",
                                    start: 20,
                                    end: 25,
                                },
                                inner: [
                                    Pair {
                                        rule: ident,
                                        span: Span {
                                            str: "x",
                                            start: 20,
                                            end: 21,
                                        },
                                        inner: [],
                                    },
                                    Pair {
                                        rule: operator_add,
                                        span: Span {
                                            str: "+",
                                            start: 22,
                                            end: 23,
                                        },
                                        inner: [],
                                    },
                                    Pair {
                                        rule: number,
                                        span: Span {
                                            str: "1",
                                            start: 24,
                                            end: 25,
                                        },
                                        inner: [],
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        ],
    },
]
