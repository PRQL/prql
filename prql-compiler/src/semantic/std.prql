# The PRQL standard library defines the following functions and transforms.
# The definitions are whitespace insensitive, and have this form:
#
# let my_func = <return_type> param1 param2 ...  -> body_expr
# where:
#   * my_func is the name of the function
#   * <return_type> is the type of result wrapped in "< ... >"
#   * param1 is the first parameter optionally followed by a type in "< ... >"
#   * param2 etc. follow the same pattern as param1
#   * -> body_expr defines the function body that creates the result.
#     It can be PRQL code or "null" to indicate internal compiler code

# Aggregate functions
# These return either a scalar when used within `aggregate`, or a column when used anywhere else.
let min = column -> <scalar || array> null
let max = column -> <scalar || array> null
let sum = column -> <scalar || array> null
let avg = column -> <scalar || array> null
let stddev = column -> <scalar || array> null
let average = column -> <scalar || array> null
let count = non_null:s"*" -> <scalar || array> null
# TODO: Possibly make this into `count distinct:true` (or like `distinct:` as an
# abbreviation of that?)
let count_distinct = column -> <scalar || array> null

# Window functions
let lag = offset column -> <array> null
let lead = offset column -> <array> null
let first = offset column -> <array> null
let last = offset column -> <array> null
let rank = -> <array> null
let rank_dense = -> <array> null
let row_number = -> <array> null

# Other functions
let round = n_digits column -> <scalar> null
let as = `noresolve.type` column -> <scalar> null
let in = pattern value -> <bool> null

# Transform type definitions
let from = `default_db.source`<table> -> <table> null
let select = columns<scalar> tbl<table> -> <table> null
let filter = condition<bool> tbl<table> -> <table> null
let derive = columns<scalar> tbl<table> -> <table> null
let aggregate = columns<array> tbl<table> -> <table> null
let sort = by<scalar> tbl<table> -> <table> null
let take = expr<scalar> tbl<table> -> <table> null
let join = `default_db.with`<table> filter `noresolve.side`:inner tbl<table> -> <table> null
let group = by pipeline tbl<table> -> <table> null
let window = rows:0..0 range:0..0 expanding:false rolling:0 pipeline tbl<table> -> <table> null

let noop = x -> x

let append = `default_db.bottom`<table> top<table> -> <table> null
let intersect = `default_db.bottom`<table> top<table> -> <table> (
    noop t = top
    join (noop b = bottom) (all (map _eq (zip t.* b.*)))
    select t.*
)
let remove = `default_db.bottom`<table> top<table> -> <table> (
    noop t = top
    join side:left (noop b = bottom) (all (map _eq (zip t.* b.*)))
    filter (all (map _is_null b.*))
    select t.*
)
let loop = pipeline top<table> -> <table> null

# List functions
let all = list -> <bool> null
let map = fn list -> null
let zip = a b -> null
let _eq = a -> null
let _is_null = a -> _param.a == null

# Misc
let from_text = input<text> `noresolve.format`:csv -> <table> null

# String functions
let lower = column -> <text> null
let upper = column -> <text> null

# type primitives
type int
type float
type bool
type text
type date
type time
type timestamp

# a tuple
type list = []

# relation is an array of tupes
type table = {[]}

# TODO: an array of anything
type array = {null}

type scalar = int || float || bool || text || date || time || timestamp || null

# Source-reading functions, primarily for DuckDB
let read_parquet = source<text> -> <table> s"SELECT * FROM read_parquet({source})"
let read_csv = source<text> -> <table> s"SELECT * FROM read_csv_auto({source})"
