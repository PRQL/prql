# The PRQL standard library defines the following functions and transforms.
# The definitions are whitespace insensitive, and have this form:
#
# let my_func = <return_type> param1 param2 ...  -> body_expr
# where:
#   * my_func is the name of the function
#   * <return_type> is the type of result wrapped in "< ... >"
#   * param1 is the first parameter optionally followed by a type in "< ... >"
#   * param2 etc. follow the same pattern as param1
#   * -> body_expr defines the function body that creates the result.
#     It can be PRQL code or "null" to indicate internal compiler code

## Types

# Type primitives
type int
type float
type bool
type text
type date
type time
type timestamp

# Generic array
# TODO: an array of anything, not just nulls
type array = [null]

# Scalar
type scalar = int || float || bool || text || date || time || timestamp || null
type tuple_of_scalars = {scalar..}

# Relation (an array of tupes)
type relation = [tuple_of_scalars]

# Transform
type transform = (relation -> relation)

## Functions

# Relational transforms
let from = `default_db.source`<relation> -> <relation> internal from
let select = columns<scalar || tuple_of_scalars> tbl<relation> -> <relation> internal select
let filter = condition<bool> tbl<relation> -> <relation> internal filter
let derive = columns<scalar || tuple_of_scalars> tbl<relation> -> <relation> internal derive
let aggregate = columns<scalar || tuple_of_scalars> tbl<relation> -> <relation> internal aggregate
let sort = by<scalar || tuple_of_scalars> tbl<relation> -> <relation> internal sort
let take = expr<scalar> tbl<relation> -> <relation> internal take
let join = `default_db.with`<relation> filter<bool> `noresolve.side`:inner tbl<relation> -> <relation> internal join
let group = by<scalar || tuple_of_scalars> pipeline<transform> tbl<relation> -> <relation> internal group
let window = rows:0..0 range:0..0 expanding:false rolling:0 pipeline<transform> tbl<relation> -> <relation> internal window

let noop = x -> x

let append = `default_db.bottom`<relation> top<relation> -> <relation> internal append
let intersect = `default_db.bottom`<relation> top<relation> -> <relation> (
    noop t = top
    join (noop b = bottom) (all (map _eq (zip t.* b.*)))
    select t.*
)
let remove = `default_db.bottom`<relation> top<relation> -> <relation> (
    noop t = top
    join side:left (noop b = bottom) (all (map _eq (zip t.* b.*)))
    filter (all (map _is_null b.*))
    select t.*
)
let loop = pipeline top<relation> -> <relation> internal loop

# Aggregate functions
# These return either a scalar when used within `aggregate`, or a column when used anywhere else.
let min = column -> <scalar || array> internal std.min
let max = column -> <scalar || array> internal std.max
let sum = column -> <scalar || array> internal std.sum
let avg = column -> <scalar || array> internal std.avg
let stddev = column -> <scalar || array> internal std.stddev
let average = column -> <scalar || array> std.avg column
let count = non_null:s"*" -> <scalar || array> internal std.count
# TODO: Possibly make this into `count distinct:true` (or like `distinct:` as an
# abbreviation of that?)
let count_distinct = column -> <scalar || array> internal std.count_distinct

# Window functions
let lag = offset column -> <array> internal std.lag
let lead = offset column -> <array> internal std.lead
let first = offset column -> <array> internal std.first
let last = offset column -> <array> internal std.last
let rank = -> <array> internal std.rank
let rank_dense = -> <array> internal std.rank_dense
let row_number = -> <array> internal std.row_number

# Misc functions
let round = n_digits column -> <scalar> internal std.round
let as = `noresolve.type` column -> <scalar> internal std.as
let in = pattern value -> <bool> internal in

# Array functions
let all = list -> <bool> internal all
let map = fn list -> internal map
let zip = a b -> internal zip
let _eq = a -> internal _eq
let _is_null = a -> _param.a == null

# Misc
let from_text = input<text> `noresolve.format`:csv -> <relation> internal from_text

# String functions
let lower = column -> <text> internal std.lower
let upper = column -> <text> internal std.upper

# File-reading functions, primarily for DuckDB
let read_parquet = source<text> -> <relation> internal std.read_parquet
let read_csv = source<text> -> <relation> internal std.read_csv
