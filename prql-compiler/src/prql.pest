// TODO:
// - Some rules are silent because we don't strictly need them, but that may be
//   too rushed — maybe we do actually want to know about e.g. comments in the
//   parse tree (and potentially put them into SQL comments)
// - Need to resolve how to handle "inline pipelines"; there is a rule here but
//   it's not used or tested. It's partly a language question — do those need to
//   start with `from`? How do these work in the midst of an `aggregate`
//   transform?

WHITESPACE = _{ " " | "\t" }
// Need to exclude # in strings (and maybe confirm whether this the syntax we want)
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY) * }

query = { SOI ~ NEWLINE* ~ (query_def ~ NEWLINE+)? ~ (( func_def | table | pipeline ) ~ ( NEWLINE+ | &EOI ))* ~ EOI }

query_def = { WHITESPACE* ~ "prql" ~ named_expr_simple*  }

func_def = { "func" ~ ident ~ func_def_params ~ "=" ~ expr }
// TODO: we could force the named parameters to follow the positional ones here.
// But pest requires some special handling because if `ident` is before
// `named_arg`, then `x:y` will be parsed as `x` and then error on `:y`.
// Possibly we can mandate whitespace to follow, but pest has annoying magic
// which removes whitespace in non-atomic rules, so we'd need to explore that.
func_def_params = { ( named_term_simple | ident )* }
table = { "table" ~ ident ~ "=" ~ "(" ~ NEWLINE* ~ pipeline ~ NEWLINE* ~ ")" }

pipe = _{ NEWLINE+ | "|" }
pipeline = { transformation ~ (pipe ~ transformation)* }

// `ident` is the transformation name.
transformation = { WHITESPACE* ~ ident ~ named_expr_simple* }

// We don't model this in the same way as a pipeline, since the first term isn't
// a transformation. We could unify them at some point.
inline_pipeline = { "(" ~ expr ~ (pipe ~ func_curry)+ ~ ")" }

ident = @{ !operator ~ (ASCII_ALPHA | "$") ~ (ASCII_ALPHANUMERIC | "." | "_" | "*" )* }

// A central issue around the terms vs expr is that we want to be able to parse:
//   [foo bar + 1, 2]
// as:
// - foo bar + 1
//   - foo bar
//     - foo
//     - bar
//   - +
//   - 1
// - 2
// So this requires two non-silent rules:
// - A notion of list item that contains anything, including operators (but
//   not commas); e.g. `foo bar + 1`.
// - A notion of expr that aggregates things between operators, e.g. foo bar.
// So we call the list item `expr`, and the things between separators `terms`.
//
// We could have them be the same, but then we need logic in the parser to
// account for where the list item is in this parse tree
// - foo bar
//   - foo
//   - bar
// - +
// - 1
// - 2

// Adding the WHITESPACE is like making it a compound-atomic operator.
expr = !{ term ~ (operator ~ term)* }
expr_simple = !{ term_simple ~ (operator ~ term_simple)* }

func_call = { ident ~ (named_term_simple | term_simple)+ }
func_curry = { ident ~ (named_term_simple | term_simple)* }

term = _{ ( s_string | f_string | func_call | term_simple ) }
term_simple = _{ ( s_string | f_string | ident | parenthesized_expr | list | range | interval | number | string_literal | inline_pipeline ) }
list = { "[" ~ NEWLINE* ~ named_expr ~ ("," ~ NEWLINE* ~ named_expr )* ~ ","? ~ NEWLINE* ~ "]" }
parenthesized_expr = _{ "(" ~ expr ~ ")" }

// We haven't implemented escapes — I think we can mostly pass those through to
// SQL, but there may be things we're missing.
// https://pest.rs/book/examples/rust/literals.html

// We need to have a non-silent rule which contains the quotes
// — `string_literal` in this case — because of
// https://github.com/pest-parser/pest/issues/583. Then when converting to AST,
// we only keep the `string` and discard the `string_literal` given it contains
// the quotes.
//
// TODO: I'm still a bit unclear how preceeding and trailing spaces are working
// -- it seems that inner spaces are included without an atomic operator (or
// with `ANY`), but prceeding & trailing spaces require both `ANY` _and_ an
// atomic operator. We have some rudimentary tests for these.

quote = _{ "\"" | "'" }
// PEEK refers to the opening quote; either `"` or `'`.
string = { ( !( PEEK ) ~ ANY )+ }
string_literal = ${ PUSH(quote) ~ string ~ POP }

number = ${ ( ASCII_DIGIT )+ ~ ("." ~ ( ASCII_DIGIT )+)? }

// this could be generalized to use term_simple
range = ${ number? ~ ".." ~ number? }

// These separate idents from each other — i.e. `foo bar and baz` will parse into
// [`foo bar`, `and`, `baz`], where `foo bar` is presumably a function call.
// TODO: review operators
operator = ${ "and" | "or" | "not" | "==" | "!=" | "=" | ">" | "<" | ">=" | "<=" | "+" | "-" | "*" | "/" | "%" }

s_string = ${ "s" ~ PUSH(quote) ~ ( interpolate_string | ( "{" ~ expr ~ "}" ))* ~ POP }
f_string = ${ "f" ~ PUSH(quote) ~ ( interpolate_string | ( "{" ~ expr ~ "}" ))* ~ POP }
interpolate_string = { ( !( PEEK | "{" ) ~ ANY )+ }

// For assigns, table aliases and named arguments
named_expr = { (ident ~ ":")? ~ expr }
named_expr_simple = { (ident ~ ":")? ~ expr_simple }
named_term_simple = { (ident ~ ":")? ~ term_simple }

interval_kind = { "microseconds" | "milliseconds" | "seconds" | "minutes" | "hours" | "days" | "weeks" | "months" | "years" }
interval = ${ number ~ interval_kind }
